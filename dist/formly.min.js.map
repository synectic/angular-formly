{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/formly.min.js","webpack:///webpack/bootstrap 157db6a84b7efc451413","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./other/utils.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./index.common.js","webpack:///./providers/formlyApiCheck.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyValidationMessages.js","webpack:///./run/formlyCustomTags.js","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///external \"angular\"","webpack:///external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_17__","__WEBPACK_EXTERNAL_MODULE_18__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_indexCommon","_indexCommon2","angular","version","window","formlyEval","scope","expression","$modelValue","$viewValue","extraLocals","_angularFix2","isFunction","$eval","extend","getFieldId","formId","options","index","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","copy","obj1","obj2","isObject","getPrototypeOf","findByNodeName","el","nodeName","element","toUpperCase","children","i","length","node","arrayify","isArray","extendFunction","_len","fns","Array","_key","args","fn","apply","_angularFix","formlyCustomValidation","formlyUtil","$q","isPromiseLike","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","validator","name","isString","extraProps","v","indexOf","push","keys","Error","JSON","stringify","restrict","link","attrs","ctrl","opts","validation","messages","message","useNewValidatorsApi","hasOwnProperty","setupWithValidators","validatorCollection","isPossiblyAsync","modelValue","viewValue","when","reject","setupWithParsers","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","$setValidity","$inject","formlyField","$http","$compile","$templateCache","$interpolate","formlyConfig","formlyValidationMessages","formlyApiCheck","formlyUsability","formlyWarn","FormlyFieldController","$scope","$timeout","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","model","simplifyLife","data","templateOptions","to","formOptions","setFieldIdAndName","extras","formName","form","$name","setDefaultValue","defaultValue","setInitialValue","initialValue","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","reverse","typeName","getType","extraOptions","initField","extendOptionsWithDefaults","resetModel","updateInitialValue","addModelWatcher","$watch","formControl","resetFormControl","isMultiNgModel","$setViewValue","$render","$setUntouched","$setPristine","$root","$$phase","$digest","addValidationMessages","invokeControllers","controller","setupFieldGroup","formState","fieldGroup","fieldType","getFieldType","checkApi","fieldLink","setFieldGroupTemplate","checkFieldGroupApi","addClass","extraAttributes","elementAttributes","map","setElementTemplate","className","addAttributes","attr","addClasses","templateString","html","asHtml","contents","watchFormControl","watchFieldNameOrExistence","nameExpressionRegex","nameExpression","exec","watchFieldExistence","fieldCount","fc","stopWatchingShowError","addShowMessagesWatcher","customExpression","errorExistsAndShouldBeVisibleExpression","$invalid","show","noTouchedButDirty","isUndefined","$touched","$dirty","errorExistsAndShouldBeVisible","showError","noop","noFormControl","templateEl","ngModelNodes","querySelectorAll","ngModelNode","getAttribute","callLinkFunctions","thusly","runManipulators","manipulators","templateToManipulate","chain","manipulator","newTemplate","fieldManipulators","getManipulators","getFieldTemplate","preWrapper","transcludeInWrappers","postWrapper","error","wrapper","append","addManipulators","_ref","_ref$preWrapper","pre","_ref$postWrapper","post","concat","templateManipulators","fromOptionsOrType","getFieldError","getTemplate","isUrl","templatePromise","_ret","httpOptions","cache","url","get","response","getWrapperOption","aWrapper","checkWrapper","validateOptions","runApiCheck","promises","w","all","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","getWrapper","getWrapperByType","typeWrappers","formWrappers","defaultWrapper","formlyFieldOptions","prefix","hide","_ref2","apiCheck","apiCheckInstance","apiCheckFunction","apiCheckOptions","instance","shape","config","output","docsBaseUrl","transclude","fields","formlyFocus","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","_toConsumableArray","arr","arr2","from","formlyForm","formlyFormGetTemplate","getRootEl","rootEl","getFieldRootEl","fieldRootEl","getHideDirective","hideDirective","defaultHideDirective","getTrackBy","trackBy","getFormName","bindName","minor","getFormlyError","startSymbol","endSymbol","copyAttributes","attributes","excluded","arrayAttrs","nodeValue","toKebabCase","getFieldAttributes","fieldAttributes","getFieldOneTimeBinding","attributeName","isOneTimeBinding","localUseOneTimeBindings","globalUseOneTimeBindings","currentFormId","parentFormAttributes","parent","hasClass","useOneTimeBindings","FormlyFormController","onModelOrFormStateChange","hideExpression","evalCloseToFormlyExpression","setupFields","fieldTransform","initModel","attachKey","setupWatchers","setupOptions","formOptionsApi","optional","initFields","isFieldGroup","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","_slice","displayName","originalListener","originalArgs","getFormlyFieldLikeLocals","formlyFormLink","setFormController","theFormlyForm","getter","parentForm","$parent","$removeControl","removeData","disableWarnings","fixChromeAutocomplete","global","removeChromeAutoComplete","offInstance","onInstance","input","document","createElement","setAttribute","appendChild","string","replace","$1","toLowerCase","prototype","slice","_providersFormlyApiCheck","_providersFormlyApiCheck2","_otherDocsBaseUrl","_otherDocsBaseUrl2","_providersFormlyUsability","_providersFormlyUsability2","_providersFormlyConfig","_providersFormlyConfig2","_providersFormlyValidationMessages","_providersFormlyValidationMessages2","_servicesFormlyUtil","_servicesFormlyUtil2","_servicesFormlyWarn","_servicesFormlyWarn2","_directivesFormlyCustomValidation","_directivesFormlyCustomValidation2","_directivesFormlyField","_directivesFormlyField2","_directivesFormlyFocus","_directivesFormlyFocus2","_directivesFormlyForm","_directivesFormlyForm2","_runFormlyNgModelAttrsManipulator","_runFormlyNgModelAttrsManipulator2","_runFormlyCustomTags","_runFormlyCustomTags2","ngModuleName","ngModule","constant","provider","directive","run","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","some","otherProp","utils","getError","checkerHelpers","setupChecker","nullable","checker","oneOfType","oneOf","_apiCheck","_apiCheck2","formlyExpression","func","specifyWrapperType","typeOrArrayOf","apiCheckProperty","objectOf","apiCheckInstanceProperty","onlyIf","withProperties","warn","throw","apiCheckFunctionProperty","formlyWrapperType","ifNot","types","overwriteOk","bool","object","strict","modelChecker","arrayOf","fieldOptionsApiShape","$$hashKey","any","number","modelOptions","updateOn","debounce","allowInvalid","getterSetter","timezone","ngModelAttrs","attribute","bound","array","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsabilityProvider","setType","checkType","extendTypeOptions","typeMap","checkOverwrite","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeValidateOptionsFunction","extendTypeDefaultOptions","_otherUtils2","extendTemplate","extendsCtrl","optionsCtrl","extendsFn","optionsFn","originalDefaultOptions","mergedOptions","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","newValue","objectName","wrappers","removeWrapperByName","removeWrappersForType","_this","console","_this2","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferUnbound","$get","_otherUtils","formlyErrorAndWarningsUrlPrefix","errorInfoSlug","getErrorMessage","toJson","urlSuffix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","suffix","alternate","validationMessages","templateOptionValue","addStringMessage","addCustomTags","div","innerHTML","isIeLessThan9","getElementsByTagName","customElements","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addValidation","isValidationMessagesNotEmpty","equals","addIfNotPresent","modelNodes","addModelOptions","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltInAttributes","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","skipNgModelAttrsManipulator","boundOnly","bothBooleanAndBound","bothAttributeAndBound","expressionOnly","attributeOnly","item","boolean","substr","nodes","$log","warnInfoSlug"],"mappings":"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","file":"dist/formly.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"api-check\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\", \"api-check\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","//! angular-formly version 6.15.1 built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us> (ó ì_í)=óò=(ì_í ò)\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"api-check\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\", \"api-check\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _indexCommon = __webpack_require__(8);\n\t\n\tvar _indexCommon2 = _interopRequireDefault(_indexCommon);\n\n\texports['default'] = _indexCommon2['default'];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar angular = __webpack_require__(17);\n\t\n\t/* istanbul ignore next */\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\texports['default'] = angular;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports[\"default\"] = \"https://github.com/formly-js/angular-formly/blob/\" + (\"6.15.1\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\tmodule.exports = exports[\"default\"];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName, arrayify: arrayify, extendFunction: extendFunction };\n\t\n\tfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n\t  if (_angularFix2['default'].isFunction(expression)) {\n\t    return expression($viewValue, $modelValue, scope, extraLocals);\n\t  } else {\n\t    return scope.$eval(expression, _angularFix2['default'].extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  if (options.id) {\n\t    return options.id;\n\t  }\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = 'template';\n\t  } else if (!type && options.templateUrl) {\n\t    type = 'templateUrl';\n\t  }\n\t\n\t  return [formId, type, options.key, index].join('_');\n\t}\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  _angularFix2['default'].forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    _angularFix2['default'].forEach(src, function (val, prop) {\n\t      if (!_angularFix2['default'].isDefined(dest[prop])) {\n\t        dest[prop] = _angularFix2['default'].copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return _angularFix2['default'].isObject(obj1) && _angularFix2['default'].isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\t\n\t// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = _angularFix2['default'].element(el);\n\t  }\n\t\n\t  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\t\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\t\n\tfunction arrayify(obj) {\n\t  if (obj && !_angularFix2['default'].isArray(obj)) {\n\t    obj = [obj];\n\t  } else if (!obj) {\n\t    obj = [];\n\t  }\n\t  return obj;\n\t}\n\t\n\tfunction extendFunction() {\n\t  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n\t    fns[_key] = arguments[_key];\n\t  }\n\t\n\t  return function extendedFunction() {\n\t    var args = arguments;\n\t    fns.forEach(function (fn) {\n\t      return fn.apply(null, args);\n\t    });\n\t  };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyCustomValidation;\n\t\n\t// @ngInject\n\tfunction formlyCustomValidation(formlyUtil, $q) {\n\t  return {\n\t    restrict: 'A',\n\t    require: 'ngModel',\n\t    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n\t      var opts = scope.options;\n\t      if (opts.validators) {\n\t        checkValidators(opts.validators);\n\t      }\n\t      opts.validation.messages = opts.validation.messages || {};\n\t      _angularFix2['default'].forEach(opts.validation.messages, function (message, key) {\n\t        opts.validation.messages[key] = function () {\n\t          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t        };\n\t      });\n\t\n\t      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n\t      _angularFix2['default'].forEach(opts.validators, function addValidatorToPipeline(validator, name) {\n\t        var message = validator.message;\n\t        if (message) {\n\t          opts.validation.messages[name] = function () {\n\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t          };\n\t        }\n\t        validator = _angularFix2['default'].isObject(validator) ? validator.expression : validator;\n\t        var isPossiblyAsync = !_angularFix2['default'].isString(validator);\n\t        if (useNewValidatorsApi) {\n\t          setupWithValidators();\n\t        } else {\n\t          setupWithParsers();\n\t        }\n\t\n\t        function setupWithValidators() {\n\t          var validatorCollection = isPossiblyAsync ? '$asyncValidators' : '$validators';\n\t          ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n\t            var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t            if (isPossiblyAsync) {\n\t              return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t            } else {\n\t              return value;\n\t            }\n\t          };\n\t        }\n\t\n\t        function setupWithParsers() {\n\t          var inFlightValidator = undefined;\n\t          ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n\t            var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t            if (isPromiseLike(isValid)) {\n\t              ctrl.$pending = ctrl.$pending || {};\n\t              ctrl.$pending[name] = true;\n\t              inFlightValidator = isValid;\n\t              isValid.then(function () {\n\t                if (inFlightValidator === isValid) {\n\t                  ctrl.$setValidity(name, true);\n\t                }\n\t              })['catch'](function () {\n\t                if (inFlightValidator === isValid) {\n\t                  ctrl.$setValidity(name, false);\n\t                }\n\t              })['finally'](function () {\n\t                if (Object.keys(ctrl.$pending).length === 1) {\n\t                  delete ctrl.$pending;\n\t                } else {\n\t                  delete ctrl.$pending[name];\n\t                }\n\t              });\n\t            } else {\n\t              ctrl.$setValidity(name, isValid);\n\t            }\n\t            return viewValue;\n\t          });\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  function isPromiseLike(obj) {\n\t    return obj && _angularFix2['default'].isFunction(obj.then);\n\t  }\n\t\n\t  function checkValidators(validators) {\n\t    var allowedProperties = ['expression', 'message'];\n\t    var validatorsWithExtraProps = {};\n\t    _angularFix2['default'].forEach(validators, function (validator, name) {\n\t      if (_angularFix2['default'].isString(validator)) {\n\t        return;\n\t      }\n\t      var extraProps = [];\n\t      _angularFix2['default'].forEach(validator, function (v, key) {\n\t        if (allowedProperties.indexOf(key) === -1) {\n\t          extraProps.push(key);\n\t        }\n\t      });\n\t      if (extraProps.length) {\n\t        validatorsWithExtraProps[name] = extraProps;\n\t      }\n\t    });\n\t    if (Object.keys(validatorsWithExtraProps).length) {\n\t      throw new Error(['Validators are only allowed to be functions or objects that have ' + allowedProperties.join(', ') + '.', 'You provided some extra properties: ' + JSON.stringify(validatorsWithExtraProps)].join(' '));\n\t    }\n\t  }\n\t}\n\tformlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyField;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyField\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyValidationMessages, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t  var arrayify = formlyUtil.arrayify;\n\t\n\t  FormlyFieldController.$inject = [\"$scope\", \"$timeout\", \"$parse\", \"$controller\"];\n\t  return {\n\t    restrict: 'AE',\n\t    transclude: true,\n\t    scope: {\n\t      options: '=',\n\t      model: '=',\n\t      formId: '@', // TODO remove formId in a breaking release\n\t      index: '=?',\n\t      fields: '=?',\n\t      formState: '=?',\n\t      formOptions: '=?',\n\t      form: '=?' // TODO require form in a breaking release\n\t    },\n\t    controller: FormlyFieldController,\n\t    link: fieldLink\n\t  };\n\t\n\t  // @ngInject\n\t  function FormlyFieldController($scope, $timeout, $parse, $controller) {\n\t    /* eslint max-statements:[2, 32] */\n\t    if ($scope.options.fieldGroup) {\n\t      setupFieldGroup();\n\t      return;\n\t    }\n\t\n\t    var fieldType = getFieldType($scope.options);\n\t    simplifyLife($scope.options);\n\t    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n\t    extendOptionsWithDefaults($scope.options, $scope.index);\n\t    checkApi($scope.options);\n\t    // set field id to link labels and fields\n\t\n\t    // initalization\n\t    setFieldIdAndName();\n\t    setDefaultValue();\n\t    setInitialValue();\n\t    runExpressions();\n\t    addModelWatcher($scope, $scope.options);\n\t    addValidationMessages($scope.options);\n\t    invokeControllers($scope, $scope.options, fieldType);\n\t\n\t    // function definitions\n\t    function runExpressions() {\n\t      // must run on next tick to make sure that the current value is correct.\n\t      $timeout(function runExpressionsOnNextTick() {\n\t        var field = $scope.options;\n\t        var currentValue = valueGetterSetter();\n\t        _angularFix2['default'].forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t          var setter = $parse(prop).assign;\n\t          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n\t          promise.then(function setFieldValue(value) {\n\t            setter(field, value);\n\t          });\n\t        });\n\t      });\n\t    }\n\t\n\t    function valueGetterSetter(newVal) {\n\t      if (!$scope.model || !$scope.options.key) {\n\t        return undefined;\n\t      }\n\t      if (_angularFix2['default'].isDefined(newVal)) {\n\t        $scope.model[$scope.options.key] = newVal;\n\t      }\n\t      return $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function simplifyLife(options) {\n\t      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t      formlyUtil.reverseDeepMerge(options, {\n\t        data: {},\n\t        templateOptions: {},\n\t        validation: {}\n\t      });\n\t      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t      $scope.to = $scope.options.templateOptions;\n\t      $scope.formOptions = $scope.formOptions || {};\n\t    }\n\t\n\t    function setFieldIdAndName() {\n\t      if (_angularFix2['default'].isFunction(formlyConfig.extras.getFieldId)) {\n\t        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n\t      } else {\n\t        var formName = $scope.form && $scope.form.$name || $scope.formId;\n\t        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n\t      }\n\t      $scope.options.id = $scope.id;\n\t      $scope.name = $scope.options.name || $scope.options.id;\n\t      $scope.options.name = $scope.name;\n\t    }\n\t\n\t    function setDefaultValue() {\n\t      if (_angularFix2['default'].isDefined($scope.options.defaultValue) && !_angularFix2['default'].isDefined($scope.model[$scope.options.key])) {\n\t        $scope.model[$scope.options.key] = $scope.options.defaultValue;\n\t      }\n\t    }\n\t\n\t    function setInitialValue() {\n\t      $scope.options.initialValue = $scope.model && $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t      if (type) {\n\t        mergeOptions(options, type.defaultOptions);\n\t      }\n\t      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t      _angularFix2['default'].forEach(properOrder, function (typeName) {\n\t        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t      });\n\t    }\n\t\n\t    function mergeOptions(options, extraOptions) {\n\t      if (extraOptions) {\n\t        if (_angularFix2['default'].isFunction(extraOptions)) {\n\t          extraOptions = extraOptions(options);\n\t        }\n\t        formlyUtil.reverseDeepMerge(options, extraOptions);\n\t      }\n\t    }\n\t\n\t    function initField() {\n\t      // must run on next tick to make sure that the current value is correct.\n\t      $timeout(function () {\n\t        setDefaultValue();\n\t        setInitialValue();\n\t      });\n\t    }\n\t\n\t    function extendOptionsWithDefaults(options, index) {\n\t      var key = options.key || index || 0;\n\t      _angularFix2['default'].extend(options, {\n\t        // attach the key in case the formly-field directive is used directly\n\t        key: key,\n\t        value: valueGetterSetter,\n\t        runExpressions: runExpressions,\n\t        initField: initField,\n\t        resetModel: resetModel,\n\t        updateInitialValue: updateInitialValue\n\t      });\n\t    }\n\t\n\t    // initialization functions\n\t    function addModelWatcher(scope, options) {\n\t      if (options.model) {\n\t        scope.$watch('options.model', runExpressions, true);\n\t      }\n\t    }\n\t\n\t    function resetModel() {\n\t      $scope.model[$scope.options.key] = $scope.options.initialValue;\n\t      if ($scope.options.formControl) {\n\t        if (_angularFix2['default'].isArray($scope.options.formControl)) {\n\t          _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n\t            resetFormControl(formControl, true);\n\t          });\n\t        } else {\n\t          resetFormControl($scope.options.formControl);\n\t        }\n\t      }\n\t    }\n\t\n\t    function resetFormControl(formControl, isMultiNgModel) {\n\t      if (!isMultiNgModel) {\n\t        formControl.$setViewValue($scope.model[$scope.options.key]);\n\t      }\n\t\n\t      formControl.$render();\n\t      formControl.$setUntouched();\n\t      formControl.$setPristine();\n\t\n\t      // To prevent breaking change requiring a digest to reset $viewModel\n\t      if (!$scope.$root.$$phase) {\n\t        $scope.$digest();\n\t      }\n\t    }\n\t\n\t    function updateInitialValue() {\n\t      $scope.options.initialValue = $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function addValidationMessages(options) {\n\t      options.validation.messages = options.validation.messages || {};\n\t      _angularFix2['default'].forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n\t        if (!options.validation.messages[name]) {\n\t          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n\t            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t          };\n\t        }\n\t      });\n\t    }\n\t\n\t    function invokeControllers(scope) {\n\t      var options = arguments[1] === undefined ? {} : arguments[1];\n\t      var type = arguments[2] === undefined ? {} : arguments[2];\n\t\n\t      _angularFix2['default'].forEach([type.controller, options.controller], function (controller) {\n\t        if (controller) {\n\t          $controller(controller, { $scope: scope });\n\t        }\n\t      });\n\t    }\n\t\n\t    function setupFieldGroup() {\n\t      $scope.options.options = $scope.options.options || {};\n\t      $scope.options.options.formState = $scope.formState;\n\t    }\n\t  }\n\t\n\t  // link function\n\t  function fieldLink(scope, el) {\n\t    if (scope.options.fieldGroup) {\n\t      setFieldGroupTemplate();\n\t      return;\n\t    }\n\t\n\t    addAttributes();\n\t    addClasses();\n\t\n\t    var type = getFieldType(scope.options);\n\t    var args = arguments;\n\t    var thusly = this;\n\t    var fieldCount = 0;\n\t    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n\t    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)['catch'](function (error) {\n\t      formlyWarn('there-was-a-problem-setting-the-template-for-this-field', 'There was a problem setting the template for this field ', scope.options, error);\n\t    });\n\t\n\t    function setFieldGroupTemplate() {\n\t      checkFieldGroupApi(scope.options);\n\t      el.addClass('formly-field-group');\n\t      var extraAttributes = '';\n\t      if (scope.options.elementAttributes) {\n\t        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n\t          return '' + key + '=\"' + scope.options.elementAttributes[key] + '\"';\n\t        }).join(' ');\n\t      }\n\t      var modelValue = 'model';\n\t      scope.options.form = scope.form;\n\t      if (scope.options.key) {\n\t        modelValue = 'model[\\'' + scope.options.key + '\\']';\n\t      }\n\t      setElementTemplate('\\n          <formly-form model=\"' + modelValue + '\"\\n                       fields=\"options.fieldGroup\"\\n                       options=\"options.options\"\\n                       form=\"options.form\"\\n                       class=\"' + scope.options.className + '\"\\n                       ' + extraAttributes + '\\n                       is-field-group>\\n          </formly-form>\\n        ');\n\t    }\n\t\n\t    function addAttributes() {\n\t      if (scope.options.elementAttributes) {\n\t        el.attr(scope.options.elementAttributes);\n\t      }\n\t    }\n\t\n\t    function addClasses() {\n\t      if (scope.options.className) {\n\t        el.addClass(scope.options.className);\n\t      }\n\t      if (scope.options.type) {\n\t        el.addClass('formly-field-' + scope.options.type);\n\t      }\n\t    }\n\t\n\t    function setElementTemplate(templateString) {\n\t      el.html(asHtml(templateString));\n\t      $compile(el.contents())(scope);\n\t      return templateString;\n\t    }\n\t\n\t    function watchFormControl(templateString) {\n\t      var stopWatchingShowError = _angularFix2['default'].noop;\n\t      if (scope.options.noFormControl) {\n\t        return;\n\t      }\n\t      var templateEl = _angularFix2['default'].element('<div>' + templateString + '</div>');\n\t      var ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\t\n\t      if (ngModelNodes) {\n\t        _angularFix2['default'].forEach(ngModelNodes, function (ngModelNode) {\n\t          fieldCount++;\n\t          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n\t        });\n\t      }\n\t\n\t      function watchFieldNameOrExistence(name) {\n\t        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n\t        var nameExpression = nameExpressionRegex.exec(name);\n\t        if (nameExpression) {\n\t          name = $interpolate(name)(scope);\n\t        }\n\t        watchFieldExistence(name);\n\t      }\n\t\n\t      function watchFieldExistence(name) {\n\t        scope.$watch('form[\"' + name + '\"]', function formControlChange(formControl) {\n\t          if (formControl) {\n\t            if (fieldCount > 1) {\n\t              if (!scope.options.formControl) {\n\t                scope.options.formControl = [];\n\t              }\n\t              scope.options.formControl.push(formControl);\n\t            } else {\n\t              scope.options.formControl = formControl;\n\t            }\n\t            scope.fc = scope.options.formControl; // shortcut for template authors\n\t            stopWatchingShowError();\n\t            addShowMessagesWatcher();\n\t          }\n\t        });\n\t      }\n\t\n\t      function addShowMessagesWatcher() {\n\t        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n\t          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n\t          var options = scope.options;\n\t          var fc = scope.fc;\n\t\n\t          if (!fc.$invalid) {\n\t            return false;\n\t          } else if (typeof options.validation.show === 'boolean') {\n\t            return options.validation.show;\n\t          } else if (customExpression) {\n\t            return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n\t          } else {\n\t            var noTouchedButDirty = _angularFix2['default'].isUndefined(fc.$touched) && fc.$dirty;\n\t            return scope.fc.$touched || noTouchedButDirty;\n\t          }\n\t        }, function onShowValidationChange(show) {\n\t          scope.options.validation.errorExistsAndShouldBeVisible = show;\n\t          scope.showError = show; // shortcut for template authors\n\t        });\n\t      }\n\t    }\n\t\n\t    function callLinkFunctions() {\n\t      if (type && type.link) {\n\t        type.link.apply(thusly, args);\n\t      }\n\t      if (scope.options.link) {\n\t        scope.options.link.apply(thusly, args);\n\t      }\n\t    }\n\t\n\t    function runManipulators(manipulators) {\n\t      return function runManipulatorsOnTemplate(templateToManipulate) {\n\t        var chain = $q.when(templateToManipulate);\n\t        _angularFix2['default'].forEach(manipulators, function (manipulator) {\n\t          chain = chain.then(function (template) {\n\t            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t              return _angularFix2['default'].isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t            });\n\t          });\n\t        });\n\t        return chain;\n\t      };\n\t    }\n\t  }\n\t\n\t  // sort-of stateless util functions\n\t  function asHtml(el) {\n\t    var wrapper = _angularFix2['default'].element('<a></a>');\n\t    return wrapper.append(el).html();\n\t  }\n\t\n\t  function getFieldType(options) {\n\t    return options.type && formlyConfig.getType(options.type);\n\t  }\n\t\n\t  function getManipulators(options, formOptions) {\n\t    var preWrapper = [];\n\t    var postWrapper = [];\n\t    addManipulators(options.templateManipulators);\n\t    addManipulators(formOptions.templateManipulators);\n\t    addManipulators(formlyConfig.templateManipulators);\n\t    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\t\n\t    function addManipulators(manipulators) {\n\t      /* eslint-disable */ // it doesn't understand this :-(\n\t\n\t      var _ref = manipulators || {};\n\t\n\t      var _ref$preWrapper = _ref.preWrapper;\n\t      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n\t      var _ref$postWrapper = _ref.postWrapper;\n\t      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\t\n\t      preWrapper = preWrapper.concat(pre);\n\t      postWrapper = postWrapper.concat(post);\n\t      /* eslint-enable */\n\t    }\n\t  }\n\t\n\t  function getFieldTemplate(options) {\n\t    function fromOptionsOrType(key, fieldType) {\n\t      if (_angularFix2['default'].isDefined(options[key])) {\n\t        return options[key];\n\t      } else if (fieldType && _angularFix2['default'].isDefined(fieldType[key])) {\n\t        return fieldType[key];\n\t      }\n\t    }\n\t\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    var template = fromOptionsOrType('template', type);\n\t    var templateUrl = fromOptionsOrType('templateUrl', type);\n\t    if (_angularFix2['default'].isUndefined(template) && !templateUrl) {\n\t      throw formlyUsability.getFieldError('type-type-has-no-template', 'Type \\'' + options.type + '\\' has not template. On element:', options);\n\t    }\n\t\n\t    return getTemplate(templateUrl || template, _angularFix2['default'].isUndefined(template), options);\n\t  }\n\t\n\t  function getTemplate(template, isUrl, options) {\n\t    var templatePromise = undefined;\n\t    if (_angularFix2['default'].isFunction(template)) {\n\t      templatePromise = $q.when(template(options));\n\t    } else {\n\t      templatePromise = $q.when(template);\n\t    }\n\t\n\t    if (!isUrl) {\n\t      return templatePromise;\n\t    } else {\n\t      var _ret = (function () {\n\t        var httpOptions = { cache: $templateCache };\n\t        return {\n\t          v: templatePromise.then(function (url) {\n\t            return $http.get(url, httpOptions);\n\t          }).then(function (response) {\n\t            return response.data;\n\t          })['catch'](function handleErrorGettingATemplate(error) {\n\t            formlyWarn('problem-loading-template-for-templateurl', 'Problem loading template for ' + template, error);\n\t          })\n\t        };\n\t      })();\n\t\n\t      if (typeof _ret === 'object') return _ret.v;\n\t    }\n\t  }\n\t\n\t  function transcludeInWrappers(options, formOptions) {\n\t    var wrapper = getWrapperOption(options, formOptions);\n\t\n\t    return function transcludeTemplate(template) {\n\t      if (!wrapper.length) {\n\t        return $q.when(template);\n\t      }\n\t\n\t      wrapper.forEach(function (aWrapper) {\n\t        formlyUsability.checkWrapper(aWrapper, options);\n\t        aWrapper.validateOptions && aWrapper.validateOptions(options);\n\t        runApiCheck(aWrapper, options);\n\t      });\n\t      var promises = wrapper.map(function (w) {\n\t        return getTemplate(w.template || w.templateUrl, !w.template);\n\t      });\n\t      return $q.all(promises).then(function (wrappersTemplates) {\n\t        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t        });\n\t        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t        var totalWrapper = wrappersTemplates.shift();\n\t        wrappersTemplates.forEach(function (wrapperTemplate) {\n\t          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t        });\n\t        return doTransclusion(totalWrapper, template);\n\t      });\n\t    };\n\t  }\n\t\n\t  function doTransclusion(wrapper, template) {\n\t    var superWrapper = _angularFix2['default'].element('<a></a>'); // this allows people not have to have a single root in wrappers\n\t    superWrapper.append(wrapper);\n\t    var transcludeEl = superWrapper.find('formly-transclude');\n\t    if (!transcludeEl.length) {\n\t      // try it using our custom find function\n\t      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n\t    }\n\t    transcludeEl.replaceWith(template);\n\t    return superWrapper.html();\n\t  }\n\t\n\t  function getWrapperOption(options, formOptions) {\n\t    /* eslint complexity:[6, 2] */\n\t    var wrapper = options.wrapper;\n\t    // explicit null means no wrapper\n\t    if (wrapper === null) {\n\t      return [];\n\t    }\n\t\n\t    // nothing specified means use the default wrapper for the type\n\t    if (!wrapper) {\n\t      // get all wrappers that specify they apply to this type\n\t      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t    } else {\n\t      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t    }\n\t\n\t    // get all wrappers for that the type specified that it uses.\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    if (type && type.wrapper) {\n\t      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(typeWrappers);\n\t    }\n\t\n\t    // add form wrappers\n\t    if (formOptions.wrapper) {\n\t      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(formWrappers);\n\t    }\n\t\n\t    // add the default wrapper last\n\t    var defaultWrapper = formlyConfig.getWrapper();\n\t    if (defaultWrapper) {\n\t      wrapper.push(defaultWrapper);\n\t    }\n\t    return wrapper;\n\t  }\n\t\n\t  function checkApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyFieldOptions, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t    // validate with the type\n\t    var type = options.type && formlyConfig.getType(options.type);\n\t    if (type) {\n\t      if (type.validateOptions) {\n\t        type.validateOptions(options);\n\t      }\n\t      runApiCheck(type, options);\n\t    }\n\t    if (options.expressionProperties && options.expressionProperties.hide) {\n\t      formlyWarn('dont-use-expressionproperties.hide-use-hideexpression-instead', 'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead', options);\n\t    }\n\t  }\n\t\n\t  function checkFieldGroupApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.fieldGroup, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t  }\n\t\n\t  function runApiCheck(_ref2, options) {\n\t    var apiCheck = _ref2.apiCheck;\n\t    var apiCheckInstance = _ref2.apiCheckInstance;\n\t    var apiCheckFunction = _ref2.apiCheckFunction;\n\t    var apiCheckOptions = _ref2.apiCheckOptions;\n\t\n\t    if (!apiCheck) {\n\t      return;\n\t    }\n\t    var instance = apiCheckInstance || formlyApiCheck;\n\t    var fn = apiCheckFunction || 'warn';\n\t    var shape = instance.shape(apiCheck);\n\t    instance[fn](shape, options, apiCheckOptions || {\n\t      prefix: 'formly-field ' + name,\n\t      url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n\t    });\n\t  }\n\t}\n\tformlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"$interpolate\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports['default'] = formlyFocus;\n\t\n\t// @ngInject\n\tfunction formlyFocus($timeout, $document) {\n\t  return {\n\t    restrict: 'A',\n\t    link: function formlyFocusLink(scope, element, attrs) {\n\t      var previousEl = null;\n\t      var el = element[0];\n\t      var doc = $document[0];\n\t      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n\t        if (value === 'true') {\n\t          $timeout(function setElementFocus() {\n\t            previousEl = doc.activeElement;\n\t            el.focus();\n\t          }, ~ ~attrs.focusWait);\n\t        } else if (value === 'false') {\n\t          if (doc.activeElement === el) {\n\t            el.blur();\n\t            if (attrs.hasOwnProperty('refocus') && previousEl) {\n\t              previousEl.focus();\n\t            }\n\t          }\n\t        }\n\t      });\n\t    }\n\t  };\n\t}\n\tformlyFocus.$inject = [\"$timeout\", \"$document\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar _slice = Array.prototype.slice;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyForm;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyForm\n\t * @restrict E\n\t */\n\t// @ngInject\n\tfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n\t  var currentFormId = 1;\n\t  FormlyFormController.$inject = [\"$scope\", \"formlyApiCheck\", \"formlyUtil\"];\n\t  return {\n\t    restrict: 'E',\n\t    template: formlyFormGetTemplate,\n\t    replace: true,\n\t    transclude: true,\n\t    scope: {\n\t      fields: '=',\n\t      model: '=',\n\t      form: '=?',\n\t      options: '=?'\n\t    },\n\t    controller: FormlyFormController,\n\t    link: formlyFormLink\n\t  };\n\t\n\t  function formlyFormGetTemplate(el, attrs) {\n\t    var rootEl = getRootEl();\n\t    var fieldRootEl = getFieldRootEl();\n\t    var formId = 'formly_' + currentFormId++;\n\t    var parentFormAttributes = '';\n\t    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n\t      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n\t    }\n\t    var globalUseOneTimeBindings = formlyConfig.extras.field ? formlyConfig.extras.field.useOneTimeBindings : null;\n\t    var localUseOneTimeBindings = attrs.useOneTimeBindings ? $parse(attrs.useOneTimeBindings)() : null;\n\t    return '\\n        <' + rootEl + ' class=\"formly\"\\n                 name=\"' + getFormName() + '\"\\n                 role=\"form\" ' + parentFormAttributes + '>\\n          <' + fieldRootEl + ' formly-field\\n               ng-repeat=\"field in ' + getFieldOneTimeBinding('ng-repeat') + 'fields ' + getTrackBy() + '\"\\n               ' + getHideDirective() + '=\"' + getFieldOneTimeBinding(getHideDirective()) + '!field.hide\"\\n               ' + getFieldAttributes() + '\\n               class=\"formly-field\"\\n               options=\"' + getFieldOneTimeBinding('options') + 'field\"\\n               model=\"' + getFieldOneTimeBinding('model') + '(field.model || model)\"\\n               fields=\"' + getFieldOneTimeBinding('fields') + 'fields\"\\n               form=\"' + getFieldOneTimeBinding('form') + 'theFormlyForm\"\\n               form-id=\"' + getFieldOneTimeBinding('form-id') + '' + getFormName() + '\"\\n               form-state=\"' + getFieldOneTimeBinding('form-state') + 'options.formState\"\\n               form-options=\"' + getFieldOneTimeBinding('form-options') + 'options\"\\n               index=\"' + getFieldOneTimeBinding('index') + '$index\">\\n          </' + fieldRootEl + '>\\n          <div ng-transclude></div>\\n        </' + rootEl + '>\\n      ';\n\t\n\t    function getRootEl() {\n\t      return attrs.rootEl || 'ng-form';\n\t    }\n\t\n\t    function getFieldRootEl() {\n\t      return attrs.fieldRootEl || 'div';\n\t    }\n\t\n\t    function getHideDirective() {\n\t      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n\t    }\n\t\n\t    function getTrackBy() {\n\t      if (!attrs.trackBy) {\n\t        return '';\n\t      } else {\n\t        return 'track by ' + attrs.trackBy;\n\t      }\n\t    }\n\t\n\t    function getFormName() {\n\t      var formName = formId;\n\t      var bindName = attrs.bindName;\n\t      if (bindName) {\n\t        if (_angularFix2['default'].version.minor < 3) {\n\t          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n\t        }\n\t        // we can do a one-time binding here because we know we're in 1.3.x territory\n\t        formName = '' + $interpolate.startSymbol() + '::\\'formly_\\' + ' + bindName + '' + $interpolate.endSymbol();\n\t      }\n\t      return formName;\n\t    }\n\t\n\t    function copyAttributes(attributes) {\n\t      var excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class'];\n\t      var arrayAttrs = [];\n\t      _angularFix2['default'].forEach(attributes, function (_ref) {\n\t        var nodeName = _ref.nodeName;\n\t        var nodeValue = _ref.nodeValue;\n\t\n\t        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n\t          arrayAttrs.push('' + toKebabCase(nodeName) + '=\"' + nodeValue + '\"');\n\t        }\n\t      });\n\t      return arrayAttrs.join(' ');\n\t    }\n\t\n\t    function getFieldAttributes() {\n\t      if (attrs.fieldAttributes) {\n\t        return attrs.fieldAttributes;\n\t      }\n\t      if (formlyConfig.extras.field && formlyConfig.extras.field.attributes) {\n\t        return formlyConfig.extras.field.attributes;\n\t      }\n\t      return '';\n\t    }\n\t\n\t    function getFieldOneTimeBinding(attributeName) {\n\t      var isOneTimeBinding = false;\n\t      if (localUseOneTimeBindings && localUseOneTimeBindings[attributeName] !== undefined) {\n\t        isOneTimeBinding = localUseOneTimeBindings[attributeName];\n\t      } else if (globalUseOneTimeBindings && globalUseOneTimeBindings[attributeName] !== undefined) {\n\t        isOneTimeBinding = globalUseOneTimeBindings[attributeName];\n\t      }\n\t      return isOneTimeBinding ? '::' : '';\n\t    }\n\t  }\n\t\n\t  // @ngInject\n\t  function FormlyFormController($scope, formlyApiCheck, formlyUtil) {\n\t    setupOptions();\n\t    $scope.model = $scope.model || {};\n\t    setupFields();\n\t\n\t    // watch the model and evaluate watch expressions that depend on it.\n\t    $scope.$watch('model', onModelOrFormStateChange, true);\n\t    if ($scope.options.formState) {\n\t      $scope.$watch('options.formState', onModelOrFormStateChange, true);\n\t    }\n\t\n\t    function onModelOrFormStateChange() {\n\t      _angularFix2['default'].forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n\t        /*jshint -W030 */\n\t        var model = field.model || $scope.model;\n\t        field.initField && field.initField();\n\t        field.runExpressions && field.runExpressions(model);\n\t        if (field.hideExpression) {\n\t          // can't use hide with expressionProperties reliably\n\t          var val = model[field.key];\n\t          field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n\t        }\n\t      });\n\t    }\n\t\n\t    function setupFields() {\n\t      $scope.fields = $scope.fields || [];\n\t      var fieldTransform = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\t\n\t      if (fieldTransform) {\n\t        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n\t        if (!$scope.fields) {\n\t          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n\t        }\n\t      }\n\t\n\t      _angularFix2['default'].forEach($scope.fields, initModel); // initializes the model property if set to 'formState'\n\t      _angularFix2['default'].forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t      _angularFix2['default'].forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t    }\n\t\n\t    function setupOptions() {\n\t      formlyApiCheck['throw']([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: 'formly-form options check' });\n\t      $scope.options = $scope.options || {};\n\t      $scope.options.formState = $scope.options.formState || {};\n\t\n\t      _angularFix2['default'].extend($scope.options, {\n\t        updateInitialValue: updateInitialValue,\n\t        resetModel: resetModel,\n\t        initFields: initFields\n\t      });\n\t    }\n\t\n\t    function initFields() {\n\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t        if (isFieldGroup(field)) {\n\t          field.options.initFields();\n\t        } else {\n\t          field.initField();\n\t        }\n\t      });\n\t    }\n\t\n\t    function updateInitialValue() {\n\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t        if (isFieldGroup(field)) {\n\t          field.options.updateInitialValue();\n\t        } else {\n\t          field.updateInitialValue();\n\t        }\n\t      });\n\t    }\n\t\n\t    function resetModel() {\n\t      _angularFix2['default'].forEach($scope.fields, function (field) {\n\t        if (isFieldGroup(field)) {\n\t          field.options.resetModel();\n\t        } else {\n\t          field.resetModel();\n\t        }\n\t      });\n\t    }\n\t\n\t    function initModel(field) {\n\t      if (_angularFix2['default'].isString(field.model)) {\n\t        var expression = field.model;\n\t        var index = $scope.fields.indexOf(field);\n\t        field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n\t        if (!field.model) {\n\t          throw formlyUsability.getFieldError('field-model-must-be-initialized', 'Field model must be initialized. When specifying a model as a string for a field, the result of the' + ' expression must have been initialized ahead of time.', field);\n\t        }\n\t      }\n\t    }\n\t\n\t    function attachKey(field, index) {\n\t      if (!isFieldGroup(field)) {\n\t        field.key = field.key || index || 0;\n\t      }\n\t    }\n\t\n\t    function setupWatchers(field, index) {\n\t      if (isFieldGroup(field) || !_angularFix2['default'].isDefined(field.watcher)) {\n\t        return;\n\t      }\n\t      var watchers = field.watcher;\n\t      if (!_angularFix2['default'].isArray(watchers)) {\n\t        watchers = [watchers];\n\t      }\n\t      _angularFix2['default'].forEach(watchers, function setupWatcher(watcher) {\n\t        if (!_angularFix2['default'].isDefined(watcher.listener)) {\n\t          throw formlyUsability.getFieldError('all-field-watchers-must-have-a-listener', 'All field watchers must have a listener', field);\n\t        }\n\t        var watchExpression = getWatchExpression(watcher, field, index);\n\t        var watchListener = getWatchListener(watcher, field, index);\n\t\n\t        var type = watcher.type || '$watch';\n\t        watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t      });\n\t    }\n\t\n\t    function getWatchExpression(watcher, field, index) {\n\t      var watchExpression = watcher.expression || 'model[\\'' + field.key + '\\']';\n\t      if (_angularFix2['default'].isFunction(watchExpression)) {\n\t        // wrap the field's watch expression so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalExpression = watchExpression;\n\t        watchExpression = function formlyWatchExpression() {\n\t          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t          return originalExpression.apply(undefined, _toConsumableArray(args));\n\t        };\n\t        watchExpression.displayName = 'Formly Watch Expression for field for ' + field.key;\n\t      }\n\t      return watchExpression;\n\t    }\n\t\n\t    function getWatchListener(watcher, field, index) {\n\t      var watchListener = watcher.listener;\n\t      if (_angularFix2['default'].isFunction(watchListener)) {\n\t        // wrap the field's watch listener so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalListener = watchListener;\n\t        watchListener = function formlyWatchListener() {\n\t          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t          return originalListener.apply(undefined, _toConsumableArray(args));\n\t        };\n\t        watchListener.displayName = 'Formly Watch Listener for field for ' + field.key;\n\t      }\n\t      return watchListener;\n\t    }\n\t\n\t    function modifyArgs(watcher, index) {\n\t      for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t        originalArgs[_key - 2] = arguments[_key];\n\t      }\n\t\n\t      return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t    }\n\t\n\t    function evalCloseToFormlyExpression(expression, val, field, index) {\n\t      var extraLocals = getFormlyFieldLikeLocals(field, index);\n\t      return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n\t    }\n\t\n\t    function getFormlyFieldLikeLocals(field, index) {\n\t      // this makes it closer to what a regular formlyExpression would be\n\t      return {\n\t        options: field,\n\t        index: index,\n\t        formState: $scope.options.formState,\n\t        formId: $scope.formId\n\t      };\n\t    }\n\t  }\n\t\n\t  function formlyFormLink(scope, el, attrs) {\n\t    setFormController();\n\t    fixChromeAutocomplete();\n\t\n\t    function setFormController() {\n\t      var formId = attrs.name;\n\t      scope.formId = formId;\n\t      scope.theFormlyForm = scope[formId];\n\t      if (attrs.form) {\n\t        var getter = $parse(attrs.form);\n\t        var setter = getter.assign;\n\t        var parentForm = getter(scope.$parent);\n\t        if (parentForm) {\n\t          scope.theFormlyForm = parentForm;\n\t          if (scope[formId]) {\n\t            scope.theFormlyForm.$removeControl(scope[formId]);\n\t          }\n\t\n\t          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n\t          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n\t          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n\t          // this is necessary because it's confusing to have a step between the form you pass in\n\t          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n\t          // to children forms :-( This line was added to solve this issue:\n\t          // https://github.com/formly-js/angular-formly/issues/287\n\t          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n\t          // so I expect it will remain this way for the life of angular 1.x\n\t          el.removeData('$formController');\n\t        } else {\n\t          setter(scope.$parent, scope[formId]);\n\t        }\n\t      }\n\t      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n\t        /* eslint no-console:0 */\n\t        formlyWarn('formly-form-has-no-formcontroller', 'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work', el, scope);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * chrome autocomplete lameness\n\t     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t     */\n\t    function fixChromeAutocomplete() {\n\t      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t      if (global && !offInstance || onInstance) {\n\t        var input = document.createElement('input');\n\t        input.setAttribute('autocomplete', 'address-level4');\n\t        input.setAttribute('hidden', 'true');\n\t        el[0].appendChild(input);\n\t      }\n\t    }\n\t  }\n\t\n\t  // stateless util functions\n\t  function toKebabCase(string) {\n\t    if (string) {\n\t      return string.replace(/([A-Z])/g, function ($1) {\n\t        return '-' + $1.toLowerCase();\n\t      });\n\t    } else {\n\t      return '';\n\t    }\n\t  }\n\t\n\t  function isFieldGroup(field) {\n\t    return field && !!field.fieldGroup;\n\t  }\n\t}\n\tformlyForm.$inject = [\"formlyUsability\", \"formlyWarn\", \"$parse\", \"formlyConfig\", \"$interpolate\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _providersFormlyApiCheck = __webpack_require__(9);\n\t\n\tvar _providersFormlyApiCheck2 = _interopRequireDefault(_providersFormlyApiCheck);\n\t\n\tvar _otherDocsBaseUrl = __webpack_require__(2);\n\t\n\tvar _otherDocsBaseUrl2 = _interopRequireDefault(_otherDocsBaseUrl);\n\t\n\tvar _providersFormlyUsability = __webpack_require__(11);\n\t\n\tvar _providersFormlyUsability2 = _interopRequireDefault(_providersFormlyUsability);\n\t\n\tvar _providersFormlyConfig = __webpack_require__(10);\n\t\n\tvar _providersFormlyConfig2 = _interopRequireDefault(_providersFormlyConfig);\n\t\n\tvar _providersFormlyValidationMessages = __webpack_require__(12);\n\t\n\tvar _providersFormlyValidationMessages2 = _interopRequireDefault(_providersFormlyValidationMessages);\n\t\n\tvar _servicesFormlyUtil = __webpack_require__(15);\n\t\n\tvar _servicesFormlyUtil2 = _interopRequireDefault(_servicesFormlyUtil);\n\t\n\tvar _servicesFormlyWarn = __webpack_require__(16);\n\t\n\tvar _servicesFormlyWarn2 = _interopRequireDefault(_servicesFormlyWarn);\n\t\n\tvar _directivesFormlyCustomValidation = __webpack_require__(4);\n\t\n\tvar _directivesFormlyCustomValidation2 = _interopRequireDefault(_directivesFormlyCustomValidation);\n\t\n\tvar _directivesFormlyField = __webpack_require__(5);\n\t\n\tvar _directivesFormlyField2 = _interopRequireDefault(_directivesFormlyField);\n\t\n\tvar _directivesFormlyFocus = __webpack_require__(6);\n\t\n\tvar _directivesFormlyFocus2 = _interopRequireDefault(_directivesFormlyFocus);\n\t\n\tvar _directivesFormlyForm = __webpack_require__(7);\n\t\n\tvar _directivesFormlyForm2 = _interopRequireDefault(_directivesFormlyForm);\n\t\n\tvar _runFormlyNgModelAttrsManipulator = __webpack_require__(14);\n\t\n\tvar _runFormlyNgModelAttrsManipulator2 = _interopRequireDefault(_runFormlyNgModelAttrsManipulator);\n\t\n\tvar _runFormlyCustomTags = __webpack_require__(13);\n\t\n\tvar _runFormlyCustomTags2 = _interopRequireDefault(_runFormlyCustomTags);\n\t\n\tvar ngModuleName = 'formly';\n\t\n\texports['default'] = ngModuleName;\n\t\n\tvar ngModule = _angularFix2['default'].module(ngModuleName, []);\n\t\n\tngModule.constant('formlyApiCheck', _providersFormlyApiCheck2['default']);\n\tngModule.constant('formlyErrorAndWarningsUrlPrefix', _otherDocsBaseUrl2['default']);\n\tngModule.constant('formlyVersion', (\"6.15.1\")); // <-- webpack variable\n\t\n\tngModule.provider('formlyUsability', _providersFormlyUsability2['default']);\n\tngModule.provider('formlyConfig', _providersFormlyConfig2['default']);\n\t\n\tngModule.factory('formlyValidationMessages', _providersFormlyValidationMessages2['default']);\n\tngModule.factory('formlyUtil', _servicesFormlyUtil2['default']);\n\tngModule.factory('formlyWarn', _servicesFormlyWarn2['default']);\n\t\n\tngModule.directive('formlyCustomValidation', _directivesFormlyCustomValidation2['default']);\n\tngModule.directive('formlyField', _directivesFormlyField2['default']);\n\tngModule.directive('formlyFocus', _directivesFormlyFocus2['default']);\n\tngModule.directive('formlyForm', _directivesFormlyForm2['default']);\n\t\n\tngModule.run(_runFormlyNgModelAttrsManipulator2['default']);\n\tngModule.run(_runFormlyCustomTags2['default']);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _apiCheck = __webpack_require__(18);\n\t\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\tvar apiCheck = (0, _apiCheck2['default'])({\n\t  output: {\n\t    prefix: 'angular-formly:',\n\t    docsBaseUrl: __webpack_require__(2)\n\t  }\n\t});\n\t\n\tfunction shapeRequiredIfNot(otherProps, propChecker) {\n\t  if (!_angularFix2['default'].isArray(otherProps)) {\n\t    otherProps = [otherProps];\n\t  }\n\t  var type = 'specified if these are not specified: `' + otherProps.join(', ') + '` (otherwise it\\'s optional)';\n\t  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t    var propExists = obj && obj.hasOwnProperty(propName);\n\t    var otherPropsExist = otherProps.some(function (otherProp) {\n\t      return obj && obj.hasOwnProperty(otherProp);\n\t    });\n\t    if (!otherPropsExist && !propExists) {\n\t      return apiCheck.utils.getError(propName, location, type);\n\t    } else if (propExists) {\n\t      return propChecker(prop, propName, location, obj);\n\t    }\n\t  }\n\t  shapeRequiredIfNotDefinition.type = type;\n\t  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t}\n\t\n\tfunction nullable(checker) {\n\t  return apiCheck.oneOfType([apiCheck.oneOf([null]), checker]);\n\t}\n\t\n\tvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\tvar specifyWrapperType = nullable(apiCheck.typeOrArrayOf(apiCheck.string));\n\t\n\tvar apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\t\n\tvar apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n\t  warn: apiCheck.func,\n\t  'throw': apiCheck.func,\n\t  shape: apiCheck.func\n\t}));\n\t\n\tvar apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\t\n\tvar formlyWrapperType = apiCheck.shape({\n\t  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n\t  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  overwriteOk: apiCheck.bool.optional,\n\t  validateOptions: apiCheck.func.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\t\n\tvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\t\n\tvar templateManipulators = nullable(apiCheck.shape({\n\t  preWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional,\n\t  postWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional\n\t}).strict);\n\t\n\tvar fieldOptionsApiShape = {\n\t  $$hashKey: apiCheck.any.optional,\n\t  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  model: modelChecker.optional,\n\t  className: apiCheck.string.optional,\n\t  id: apiCheck.string.optional,\n\t  name: apiCheck.string.optional,\n\t  expressionProperties: expressionProperties.optional,\n\t  data: apiCheck.object.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  modelOptions: apiCheck.shape({\n\t    updateOn: apiCheck.string.optional,\n\t    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n\t    allowInvalid: apiCheck.bool.optional,\n\t    getterSetter: apiCheck.bool.optional,\n\t    timezone: apiCheck.string.optional\n\t  }).optional,\n\t  watcher: apiCheck.typeOrArrayOf(apiCheck.shape({\n\t    expression: formlyExpression.optional,\n\t    listener: formlyExpression\n\t  })).optional,\n\t  validators: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t    expression: formlyExpression,\n\t    message: formlyExpression.optional\n\t  }).strict])).optional,\n\t  noFormControl: apiCheck.bool.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t    expression: apiCheck.shape.ifNot(['value', 'attribute', 'bound'], apiCheck.any).optional,\n\t    value: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n\t    attribute: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n\t    bound: apiCheck.shape.ifNot('expression', apiCheck.any).optional\n\t  }).strict).optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n\t  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  link: apiCheck.func.optional,\n\t  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t  validation: apiCheck.shape({\n\t    show: nullable(apiCheck.bool).optional,\n\t    messages: apiCheck.objectOf(formlyExpression).optional,\n\t    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t  }).optional,\n\t  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n\t  value: apiCheck.func.optional,\n\t  runExpressions: apiCheck.func.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  initField: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  initialValue: apiCheck.any.optional,\n\t  defaultValue: apiCheck.any.optional\n\t};\n\t\n\tvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\tvar formOptionsApi = apiCheck.shape({\n\t  formState: apiCheck.object.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  initFields: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  removeChromeAutoComplete: apiCheck.bool.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  fieldTransform: apiCheck.func.optional,\n\t  data: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar fieldGroup = apiCheck.shape({\n\t  $$hashKey: apiCheck.any.optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  // danger. Nested field groups wont get api-checked...\n\t  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n\t  className: apiCheck.string.optional,\n\t  options: formOptionsApi.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  data: apiCheck.object.optional,\n\t  model: modelChecker.optional,\n\t  form: apiCheck.object.optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n\t}).strict;\n\t\n\tvar typeOptionsDefaultOptions = _angularFix2['default'].copy(fieldOptionsApiShape);\n\ttypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\tvar formlyTypeOptions = apiCheck.shape({\n\t  name: apiCheck.string,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t  link: apiCheck.func.optional,\n\t  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t  'extends': apiCheck.string.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  data: apiCheck.object.optional,\n\t  validateOptions: apiCheck.func.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional,\n\t  overwriteOk: apiCheck.bool.optional\n\t}).strict;\n\t\n\t_angularFix2['default'].extend(apiCheck, {\n\t  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n\t});\n\t\n\texports['default'] = apiCheck;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _otherUtils = __webpack_require__(3);\n\t\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\texports['default'] = formlyConfig;\n\t\n\t// @ngInject\n\tfunction formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\t  var _this2 = this;\n\t\n\t  var typeMap = {};\n\t  var templateWrappersMap = {};\n\t  var defaultWrapperName = 'default';\n\t  var _this = this;\n\t  var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t  _angularFix2['default'].extend(this, {\n\t    setType: setType,\n\t    getType: getType,\n\t    setWrapper: setWrapper,\n\t    getWrapper: getWrapper,\n\t    getWrapperByType: getWrapperByType,\n\t    removeWrapperByName: removeWrapperByName,\n\t    removeWrappersForType: removeWrappersForType,\n\t    disableWarnings: false,\n\t    extras: {\n\t      disableNgModelAttrsManipulator: false,\n\t      ngModelAttrsManipulatorPreferUnbound: false,\n\t      removeChromeAutoComplete: false,\n\t      defaultHideDirective: 'ng-if',\n\t      getFieldId: null\n\t    },\n\t    templateManipulators: {\n\t      preWrapper: [],\n\t      postWrapper: []\n\t    },\n\t    $get: function $get() {\n\t      return _this2;\n\t    }\n\t  });\n\t\n\t  function setType(options) {\n\t    if (_angularFix2['default'].isArray(options)) {\n\t      _angularFix2['default'].forEach(options, setType);\n\t    } else if (_angularFix2['default'].isObject(options)) {\n\t      checkType(options);\n\t      if (options['extends']) {\n\t        extendTypeOptions(options);\n\t      }\n\t      typeMap[options.name] = options;\n\t    } else {\n\t      throw getError('You must provide an object or array for setType. You provided: ' + JSON.stringify(arguments));\n\t    }\n\t  }\n\t\n\t  function checkType(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyTypeOptions, options, {\n\t      prefix: 'formlyConfig.setType',\n\t      url: 'settype-validation-failed'\n\t    });\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, typeMap, options, 'types');\n\t    } else {\n\t      options.overwriteOk = undefined;\n\t    }\n\t  }\n\t\n\t  function extendTypeOptions(options) {\n\t    var extendsType = getType(options['extends'], true, options);\n\t    extendTypeControllerFunction(options, extendsType);\n\t    extendTypeLinkFunction(options, extendsType);\n\t    extendTypeValidateOptionsFunction(options, extendsType);\n\t    extendTypeDefaultOptions(options, extendsType);\n\t    _otherUtils2['default'].reverseDeepMerge(options, extendsType);\n\t    extendTemplate(options, extendsType);\n\t  }\n\t\n\t  function extendTemplate(options, extendsType) {\n\t    if (options.template && extendsType.templateUrl) {\n\t      delete options.templateUrl;\n\t    } else if (options.templateUrl && extendsType.template) {\n\t      delete options.template;\n\t    }\n\t  }\n\t\n\t  function extendTypeControllerFunction(options, extendsType) {\n\t    var extendsCtrl = extendsType.controller;\n\t    if (!_angularFix2['default'].isDefined(extendsCtrl)) {\n\t      return;\n\t    }\n\t    var optionsCtrl = options.controller;\n\t    if (_angularFix2['default'].isDefined(optionsCtrl)) {\n\t      options.controller = function ($scope, $controller) {\n\t        $controller(extendsCtrl, { $scope: $scope });\n\t        $controller(optionsCtrl, { $scope: $scope });\n\t      };\n\t      options.controller.$inject = ['$scope', '$controller'];\n\t    } else {\n\t      options.controller = extendsCtrl;\n\t    }\n\t  }\n\t\n\t  function extendTypeLinkFunction(options, extendsType) {\n\t    var extendsFn = extendsType.link;\n\t    if (!_angularFix2['default'].isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.link;\n\t    if (_angularFix2['default'].isDefined(optionsFn)) {\n\t      options.link = function () {\n\t        extendsFn.apply(undefined, arguments);\n\t        optionsFn.apply(undefined, arguments);\n\t      };\n\t    } else {\n\t      options.link = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeValidateOptionsFunction(options, extendsType) {\n\t    var extendsFn = extendsType.validateOptions;\n\t    if (!_angularFix2['default'].isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.validateOptions;\n\t    var originalDefaultOptions = options.defaultOptions;\n\t    if (_angularFix2['default'].isDefined(optionsFn)) {\n\t      options.validateOptions = function (opts) {\n\t        optionsFn(opts);\n\t        var mergedOptions = _angularFix2['default'].copy(opts);\n\t        var defaultOptions = originalDefaultOptions;\n\t        if (defaultOptions) {\n\t          if (_angularFix2['default'].isFunction(defaultOptions)) {\n\t            defaultOptions = defaultOptions(mergedOptions);\n\t          }\n\t          _otherUtils2['default'].reverseDeepMerge(mergedOptions, defaultOptions);\n\t        }\n\t        extendsFn(mergedOptions);\n\t      };\n\t    } else {\n\t      options.validateOptions = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeDefaultOptions(options, extendsType) {\n\t    var extendsDO = extendsType.defaultOptions;\n\t    if (!_angularFix2['default'].isDefined(extendsDO)) {\n\t      return;\n\t    }\n\t    var optionsDO = options.defaultOptions;\n\t    var optionsDOIsFn = _angularFix2['default'].isFunction(optionsDO);\n\t    var extendsDOIsFn = _angularFix2['default'].isFunction(extendsDO);\n\t    if (extendsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts) {\n\t        var extendsDefaultOptions = extendsDO(opts);\n\t        var mergedDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n\t        var extenderOptionsDefaultOptions = optionsDO;\n\t        if (optionsDOIsFn) {\n\t          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n\t        }\n\t        _otherUtils2['default'].reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n\t        return extendsDefaultOptions;\n\t      };\n\t    } else if (optionsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts) {\n\t        var newDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n\t        return optionsDO(newDefaultOptions);\n\t      };\n\t    }\n\t  }\n\t\n\t  function getType(name, throwError, errorContext) {\n\t    if (!name) {\n\t      return undefined;\n\t    }\n\t    var type = typeMap[name];\n\t    if (!type && throwError === true) {\n\t      throw getError('There is no type by the name of \"' + name + '\": ' + JSON.stringify(errorContext));\n\t    } else {\n\t      return type;\n\t    }\n\t  }\n\t\n\t  function setWrapper(_x, _x2) {\n\t    var _again = true;\n\t\n\t    _function: while (_again) {\n\t      var options = _x,\n\t          name = _x2;\n\t      _again = false;\n\t\n\t      if (_angularFix2['default'].isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (_angularFix2['default'].isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (_angularFix2['default'].isString(options)) {\n\t        _x = {\n\t          template: options,\n\t          name: name\n\t        };\n\t        _again = true;\n\t        continue _function;\n\t      }\n\t    }\n\t  }\n\t\n\t  function getOptionsTypes(options) {\n\t    if (_angularFix2['default'].isString(options.types)) {\n\t      return [options.types];\n\t    }\n\t    if (!_angularFix2['default'].isDefined(options.types)) {\n\t      return [];\n\t    } else {\n\t      return options.types;\n\t    }\n\t  }\n\t\n\t  function getOptionsName(options, name) {\n\t    return options.name || name || options.types.join(' ') || defaultWrapperName;\n\t  }\n\t\n\t  function checkWrapperAPI(options) {\n\t    formlyUsabilityProvider.checkWrapper(options);\n\t    if (options.template) {\n\t      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t    }\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n\t    } else {\n\t      delete options.overwriteOk;\n\t    }\n\t    checkWrapperTypes(options);\n\t  }\n\t\n\t  function checkWrapperTypes(options) {\n\t    var shouldThrow = !_angularFix2['default'].isArray(options.types) || !options.types.every(_angularFix2['default'].isString);\n\t    if (shouldThrow) {\n\t      throw getError('Attempted to create a template wrapper with types that is not a string or an array of strings');\n\t    }\n\t  }\n\t\n\t  function checkOverwrite(property, object, newValue, objectName) {\n\t    if (object.hasOwnProperty(property)) {\n\t      warn(['Attempting to overwrite ' + property + ' on ' + objectName + ' which is currently', '' + JSON.stringify(object[property]) + ' with ' + JSON.stringify(newValue), 'To supress this warning, specify the property \"overwriteOk: true\"'].join(' '));\n\t    }\n\t  }\n\t\n\t  function getWrapper(name) {\n\t    return templateWrappersMap[name || defaultWrapperName];\n\t  }\n\t\n\t  function getWrapperByType(type) {\n\t    /* jshint maxcomplexity:6 */\n\t    var wrappers = [];\n\t    for (var name in templateWrappersMap) {\n\t      if (templateWrappersMap.hasOwnProperty(name)) {\n\t        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t          wrappers.push(templateWrappersMap[name]);\n\t        }\n\t      }\n\t    }\n\t    return wrappers;\n\t  }\n\t\n\t  function removeWrapperByName(name) {\n\t    var wrapper = templateWrappersMap[name];\n\t    delete templateWrappersMap[name];\n\t    return wrapper;\n\t  }\n\t\n\t  function removeWrappersForType(type) {\n\t    var wrappers = getWrapperByType(type);\n\t    if (!wrappers) {\n\t      return undefined;\n\t    }\n\t    if (!_angularFix2['default'].isArray(wrappers)) {\n\t      return removeWrapperByName(wrappers.name);\n\t    } else {\n\t      wrappers.forEach(function (wrapper) {\n\t        return removeWrapperByName(wrapper.name);\n\t      });\n\t      return wrappers;\n\t    }\n\t  }\n\t\n\t  function warn() {\n\t    if (!_this.disableWarnings) {\n\t      /* eslint no-console:0 */\n\t      console.warn.apply(console, arguments);\n\t    }\n\t  }\n\t}\n\tformlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyApiCheck\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyUsability;\n\t\n\t// @ngInject\n\tfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n\t  var _this = this;\n\t\n\t  _angularFix2['default'].extend(this, {\n\t    getFormlyError: getFormlyError,\n\t    getFieldError: getFieldError,\n\t    checkWrapper: checkWrapper,\n\t    checkWrapperTemplate: checkWrapperTemplate,\n\t    getErrorMessage: getErrorMessage,\n\t    $get: function $get() {\n\t      return _this;\n\t    }\n\t  });\n\t\n\t  function getFieldError(errorInfoSlug, message, field) {\n\t    if (arguments.length < 3) {\n\t      field = message;\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message) + (' Field definition: ' + _angularFix2['default'].toJson(field)));\n\t  }\n\t\n\t  function getFormlyError(errorInfoSlug, message) {\n\t    if (!message) {\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message));\n\t  }\n\t\n\t  function getErrorMessage(errorInfoSlug, message) {\n\t    var url = '';\n\t    if (errorInfoSlug !== null) {\n\t      url = '' + formlyErrorAndWarningsUrlPrefix + '' + errorInfoSlug;\n\t    }\n\t    return 'Formly Error: ' + message + '. ' + url;\n\t  }\n\t\n\t  function checkWrapper(wrapper) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyWrapperType, wrapper, {\n\t      prefix: 'formlyConfig.setWrapper',\n\t      urlSuffix: 'setwrapper-validation-failed'\n\t    });\n\t  }\n\t\n\t  function checkWrapperTemplate(template, additionalInfo) {\n\t    var formlyTransclude = '<formly-transclude></formly-transclude>';\n\t    if (template.indexOf(formlyTransclude) === -1) {\n\t      throw getFormlyError('Template wrapper templates must use \"' + formlyTransclude + '\" somewhere in them. ' + ('This one does not have \"<formly-transclude></formly-transclude>\" in it: ' + template) + '\\n' + ('Additional information: ' + JSON.stringify(additionalInfo)));\n\t    }\n\t  }\n\t}\n\tformlyUsability.$inject = [\"formlyApiCheck\", \"formlyErrorAndWarningsUrlPrefix\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports[\"default\"] = formlyValidationMessages;\n\t\n\t// @ngInject\n\tfunction formlyValidationMessages() {\n\t\n\t  var validationMessages = {\n\t    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t    addStringMessage: addStringMessage,\n\t    messages: {}\n\t  };\n\t\n\t  return validationMessages;\n\t\n\t  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t  }\n\t\n\t  function addStringMessage(name, string) {\n\t    validationMessages.messages[name] = function () {\n\t      return string;\n\t    };\n\t  }\n\t\n\t  function templateOptionValue(prop, prefix, suffix, alternate) {\n\t    return function getValidationMessage(viewValue, modelValue, scope) {\n\t      if (scope.options.templateOptions[prop]) {\n\t        return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n\t      } else {\n\t        return alternate;\n\t      }\n\t    };\n\t  }\n\t}\n\tmodule.exports = exports[\"default\"];\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = addCustomTags;\n\t\n\t// @ngInject\n\tfunction addCustomTags($document) {\n\t  if ($document && $document.get) {\n\t    (function () {\n\t      // IE8 check ->\n\t      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n\t      var document = $document.get(0);\n\t      var div = document.createElement('div');\n\t      div.innerHTML = '<!--[if lt IE 9]><i></i><![endif]-->';\n\t      var isIeLessThan9 = div.getElementsByTagName('i').length === 1;\n\t\n\t      if (isIeLessThan9) {\n\t        // add the custom elements that we need for formly\n\t        var customElements = ['formly-field', 'formly-form', 'formly-custom-validation', 'formly-focus', 'formly-transpose'];\n\t        _angularFix2['default'].forEach(customElements, function (el) {\n\t          document.createElement(el);\n\t        });\n\t      }\n\t    })();\n\t  }\n\t}\n\taddCustomTags.$inject = [\"$document\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = addFormlyNgModelAttrsManipulator;\n\t\n\t// @ngInject\n\tfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n\t  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t    return;\n\t  }\n\t  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    /* jshint maxcomplexity:6 */\n\t    var el = document.createElement('div');\n\t    var data = options.data;\n\t    if (data.skipNgModelAttrsManipulator === true) {\n\t      return template;\n\t    }\n\t    el.innerHTML = template;\n\t    var modelNodes = el.querySelectorAll('[ng-model], [data-ng-model]');\n\t    if (!modelNodes || !modelNodes.length) {\n\t      return template;\n\t    }\n\t\n\t    addIfNotPresent(modelNodes, 'id', scope.id);\n\t    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\t\n\t    addValidation();\n\t    addModelOptions();\n\t    addTemplateOptionsAttrs();\n\t\n\t    return el.innerHTML;\n\t\n\t    function addValidation() {\n\t      var isValidationMessagesNotEmpty = _angularFix2['default'].isDefined(options.validation.messages) && !_angularFix2['default'].equals(options.validation.messages, {});\n\t      if (_angularFix2['default'].isDefined(options.validators) || isValidationMessagesNotEmpty) {\n\t        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n\t      }\n\t    }\n\t\n\t    function addModelOptions() {\n\t      if (_angularFix2['default'].isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n\t        if (options.modelOptions.getterSetter) {\n\t          _angularFix2['default'].forEach(modelNodes, function (node) {\n\t            node.setAttribute('ng-model', 'options.value');\n\t          });\n\t        }\n\t      }\n\t    }\n\t\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\t\n\t      var ngModelAttributes = getBuiltInAttributes();\n\t\n\t      // extend with the user's specifications winning\n\t      _angularFix2['default'].extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t      // Feel free to make this more simple :-)\n\t      _angularFix2['default'].forEach(ngModelAttributes, function (val, name) {\n\t        /* eslint complexity:[2, 14] */\n\t        var attrVal = undefined;\n\t        var attrName = undefined;\n\t        var ref = 'options.templateOptions[\\'' + name + '\\']';\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\t\n\t        var inTo = _angularFix2['default'].isDefined(toVal);\n\t        var inEp = _angularFix2['default'].isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.expression && inTo) {\n\t          attrName = val.expression;\n\t          if (_angularFix2['default'].isString(to[name])) {\n\t            attrVal = '$eval(' + ref + ')';\n\t          } else if (_angularFix2['default'].isFunction(to[name])) {\n\t            attrVal = '' + ref + '(model[options.key], options, this, $event)';\n\t          } else {\n\t            throw new Error('options.templateOptions.' + name + ' must be a string or function: ' + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if ((val.attribute || val.boolean) && inEp) {\n\t          attrName = val.attribute || val.boolean;\n\t          attrVal = '' + $interpolate.startSymbol() + '' + ref + '' + $interpolate.endSymbol();\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        } else if (val.boolean) {\n\t          if (inTo && !inEp && toVal) {\n\t            attrName = val.boolean;\n\t            attrVal = true;\n\t          } else {}\n\t        } else if (val.bound && inTo) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        }\n\t\n\t        if (_angularFix2['default'].isDefined(attrName) && _angularFix2['default'].isDefined(attrVal)) {\n\t          addIfNotPresent(modelNodes, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\t  }\n\t\n\t  // Utility functions\n\t  function getBuiltInAttributes() {\n\t    var ngModelAttributes = {\n\t      focus: {\n\t        attribute: 'formly-focus'\n\t      }\n\t    };\n\t    var boundOnly = [];\n\t    var bothBooleanAndBound = ['required', 'disabled'];\n\t    var bothAttributeAndBound = ['pattern', 'minlength'];\n\t    var expressionOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\t    var attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n\t    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t      bothAttributeAndBound.push('maxlength');\n\t    } else {\n\t      boundOnly.push('maxlength');\n\t    }\n\t\n\t    _angularFix2['default'].forEach(boundOnly, function (item) {\n\t      ngModelAttributes[item] = { bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(bothBooleanAndBound, function (item) {\n\t      ngModelAttributes[item] = { boolean: item, bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(bothAttributeAndBound, function (item) {\n\t      ngModelAttributes[item] = { attribute: item, bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(expressionOnly, function (item) {\n\t      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t      ngModelAttributes[propName] = { expression: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(attributeOnly, function (item) {\n\t      ngModelAttributes[item] = { attribute: item };\n\t    });\n\t    return ngModelAttributes;\n\t  }\n\t\n\t  function getEpValue(ep, name) {\n\t    return ep['templateOptions.' + name] || ep['templateOptions[\\'' + name + '\\']'] || ep['templateOptions[\"' + name + '\"]'];\n\t  }\n\t\n\t  function addIfNotPresent(nodes, attr, val) {\n\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t      if (!node.getAttribute(attr)) {\n\t        node.setAttribute(attr, val);\n\t      }\n\t    });\n\t  }\n\t}\n\taddFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\", \"$interpolate\"];\n\tmodule.exports = exports['default'];\n\n\t/* eslint no-empty:0 */\n\t// empty to illustrate that a boolean will not be added via val.bound\n\t// if you want it added via val.bound, then put it in expressionProperties\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _otherUtils = __webpack_require__(3);\n\t\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\texports['default'] = formlyUtil;\n\t\n\t// @ngInject\n\tfunction formlyUtil() {\n\t  return _otherUtils2['default'];\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\texports['default'] = formlyWarn;\n\t\n\t// @ngInject\n\tfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t  return function warn() {\n\t    if (!formlyConfig.disableWarnings) {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift('Formly Warning:');\n\t      args.push('' + formlyErrorAndWarningsUrlPrefix + '' + warnInfoSlug);\n\t      $log.warn.apply($log, _toConsumableArray(args));\n\t    }\n\t  };\n\t}\n\tformlyWarn.$inject = [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\"];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dist/formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 157db6a84b7efc451413\n **/","import index from './index.common';\nexport default index;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./index.js\n **/","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require('angular');\n\n/* istanbul ignore next */\nif (!angular.version) {\n  angular = window.angular;\n}\nexport default angular;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./angular-fix/index.js\n **/","import angular from 'angular-fix';\n\nexport default {formlyEval, getFieldId, reverseDeepMerge, findByNodeName, arrayify, extendFunction};\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n  if (angular.isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope, extraLocals);\n  } else {\n    return scope.$eval(expression, angular.extend({$viewValue, $modelValue}, extraLocals));\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  if (options.id) {\n    return options.id;\n  }\n  var type = options.type;\n  if (!type && options.template) {\n    type = 'template';\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl';\n  }\n\n  return [formId, type, options.key, index].join('_');\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, (src, index) => {\n    if (!index) {\n      return;\n    }\n    angular.forEach(src, (val, prop) => {\n      if (!angular.isDefined(dest[prop])) {\n        dest[prop] = angular.copy(val);\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) { // not a jQuery or jqLite object -> wrap it\n    el = angular.element(el);\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el;\n  }\n\n  var c = el.children();\n  for(var i = 0; c && i < c.length; i++) {\n    var node = findByNodeName(c[i], nodeName);\n    if (node) {\n      return node;\n    }\n  }\n}\n\n\nfunction arrayify(obj) {\n  if (obj && !angular.isArray(obj)) {\n    obj = [obj];\n  } else if (!obj) {\n    obj = [];\n  }\n  return obj;\n}\n\n\nfunction extendFunction(...fns) {\n  return function extendedFunction() {\n    var args = arguments;\n    fns.forEach(fn => fn.apply(null, args));\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./other/utils.js\n **/","import angular from 'angular-fix';\nexport default formlyCustomValidation;\n\n// @ngInject\nfunction formlyCustomValidation(formlyUtil, $q) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n      const opts = scope.options;\n      if (opts.validators) {\n        checkValidators(opts.validators);\n      }\n      opts.validation.messages = opts.validation.messages || {};\n      angular.forEach(opts.validation.messages, (message, key) => {\n        opts.validation.messages[key] = () => {\n          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n        };\n      });\n\n\n      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n      angular.forEach(opts.validators, function addValidatorToPipeline(validator, name) {\n        var message = validator.message;\n        if (message) {\n          opts.validation.messages[name] = () => {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n          };\n        }\n        validator = angular.isObject(validator) ? validator.expression : validator;\n        var isPossiblyAsync = !angular.isString(validator);\n        if (useNewValidatorsApi) {\n          setupWithValidators();\n        } else {\n          setupWithParsers();\n        }\n\n        function setupWithValidators() {\n          var validatorCollection = isPossiblyAsync ? '$asyncValidators' : '$validators';\n          ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n            var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n            if (isPossiblyAsync) {\n              return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n            } else {\n              return value;\n            }\n          };\n        }\n\n        function setupWithParsers() {\n          let inFlightValidator;\n          ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n            var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n            if (isPromiseLike(isValid)) {\n              ctrl.$pending = ctrl.$pending || {};\n              ctrl.$pending[name] = true;\n              inFlightValidator = isValid;\n              isValid.then(() => {\n                if (inFlightValidator === isValid) {\n                  ctrl.$setValidity(name, true);\n                }\n              }).catch(() => {\n                if (inFlightValidator === isValid) {\n                  ctrl.$setValidity(name, false);\n                }\n              }).finally(() => {\n                if (Object.keys(ctrl.$pending).length === 1) {\n                  delete ctrl.$pending;\n                } else {\n                  delete ctrl.$pending[name];\n                }\n              });\n            } else {\n              ctrl.$setValidity(name, isValid);\n            }\n            return viewValue;\n          });\n        }\n      });\n    }\n  };\n\n  function isPromiseLike(obj) {\n    return obj && angular.isFunction(obj.then);\n  }\n\n  function checkValidators(validators) {\n    var allowedProperties = ['expression', 'message'];\n    var validatorsWithExtraProps = {};\n    angular.forEach(validators, (validator, name) => {\n      if (angular.isString(validator)) {\n        return;\n      }\n      var extraProps = [];\n      angular.forEach(validator, (v, key) => {\n        if (allowedProperties.indexOf(key) === -1) {\n          extraProps.push(key);\n        }\n      });\n      if (extraProps.length) {\n        validatorsWithExtraProps[name] = extraProps;\n      }\n    });\n    if (Object.keys(validatorsWithExtraProps).length) {\n      throw new Error([\n        `Validators are only allowed to be functions or objects that have ${allowedProperties.join(', ')}.`,\n        `You provided some extra properties: ${JSON.stringify(validatorsWithExtraProps)}`\n      ].join(' '));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-custom-validation.js\n **/","import angular from 'angular-fix';\n\nexport default formlyField;\n\n/**\n * @ngdoc directive\n * @name formlyField\n * @restrict AE\n */\n// @ngInject\nfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyValidationMessages,\n                     formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n  const {arrayify} = formlyUtil;\n\n  return {\n    restrict: 'AE',\n    transclude: true,\n    scope: {\n      options: '=',\n      model: '=',\n      formId: '@', // TODO remove formId in a breaking release\n      index: '=?',\n      fields: '=?',\n      formState: '=?',\n      formOptions: '=?',\n      form: '=?' // TODO require form in a breaking release\n    },\n    controller: FormlyFieldController,\n    link: fieldLink\n  };\n\n\n  // @ngInject\n  function FormlyFieldController($scope, $timeout, $parse, $controller) {\n    /* eslint max-statements:[2, 32] */\n    if ($scope.options.fieldGroup) {\n      setupFieldGroup();\n      return;\n    }\n\n    var fieldType = getFieldType($scope.options);\n    simplifyLife($scope.options);\n    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n    extendOptionsWithDefaults($scope.options, $scope.index);\n    checkApi($scope.options);\n    // set field id to link labels and fields\n\n    // initalization\n    setFieldIdAndName();\n    setDefaultValue();\n    setInitialValue();\n    runExpressions();\n    addModelWatcher($scope, $scope.options);\n    addValidationMessages($scope.options);\n    invokeControllers($scope, $scope.options, fieldType);\n\n    // function definitions\n    function runExpressions() {\n      // must run on next tick to make sure that the current value is correct.\n      $timeout(function runExpressionsOnNextTick() {\n        var field = $scope.options;\n        var currentValue = valueGetterSetter();\n        angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n          var setter = $parse(prop).assign;\n          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n          promise.then(function setFieldValue(value) {\n            setter(field, value);\n          });\n        });\n      });\n    }\n\n    function valueGetterSetter(newVal) {\n      if (!$scope.model || !$scope.options.key) {\n        return undefined;\n      }\n      if (angular.isDefined(newVal)) {\n        $scope.model[$scope.options.key] = newVal;\n      }\n      return $scope.model[$scope.options.key];\n    }\n\n    function simplifyLife(options) {\n      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n      formlyUtil.reverseDeepMerge(options, {\n        data: {},\n        templateOptions: {},\n        validation: {}\n      });\n      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n      $scope.to = $scope.options.templateOptions;\n      $scope.formOptions = $scope.formOptions || {};\n    }\n\n    function setFieldIdAndName() {\n      if (angular.isFunction(formlyConfig.extras.getFieldId)) {\n        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n      } else {\n        const formName = ($scope.form && $scope.form.$name) || $scope.formId;\n        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n      }\n      $scope.options.id = $scope.id;\n      $scope.name = $scope.options.name || $scope.options.id;\n      $scope.options.name = $scope.name;\n    }\n\n    function setDefaultValue() {\n      if (angular.isDefined($scope.options.defaultValue) && !angular.isDefined($scope.model[$scope.options.key])) {\n        $scope.model[$scope.options.key] = $scope.options.defaultValue;\n      }\n    }\n\n    function setInitialValue() {\n      $scope.options.initialValue = $scope.model && $scope.model[$scope.options.key];\n    }\n\n    function mergeFieldOptionsWithTypeDefaults(options, type) {\n      if (type) {\n        mergeOptions(options, type.defaultOptions);\n      }\n      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n      angular.forEach(properOrder, typeName => {\n        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n      });\n    }\n\n    function mergeOptions(options, extraOptions) {\n      if (extraOptions) {\n        if (angular.isFunction(extraOptions)) {\n          extraOptions = extraOptions(options);\n        }\n        formlyUtil.reverseDeepMerge(options, extraOptions);\n      }\n    }\n\n    function initField() {\n      // must run on next tick to make sure that the current value is correct.\n      $timeout(function () {\n        setDefaultValue();\n        setInitialValue();\n      });\n    }\n\n    function extendOptionsWithDefaults(options, index) {\n      const key = options.key || index || 0;\n      angular.extend(options, {\n        // attach the key in case the formly-field directive is used directly\n        key,\n        value: valueGetterSetter,\n        runExpressions,\n        initField,\n        resetModel,\n        updateInitialValue\n      });\n    }\n\n    // initialization functions\n    function addModelWatcher(scope, options) {\n      if (options.model) {\n        scope.$watch('options.model', runExpressions, true);\n      }\n    }\n\n    function resetModel() {\n      $scope.model[$scope.options.key] = $scope.options.initialValue;\n      if ($scope.options.formControl) {\n        if(angular.isArray($scope.options.formControl)){\n          angular.forEach($scope.options.formControl, function(formControl){\n            resetFormControl(formControl, true);\n          });\n        } else {\n          resetFormControl($scope.options.formControl);\n        }\n      }\n    }\n\n    function resetFormControl(formControl, isMultiNgModel){\n      if(!isMultiNgModel){\n        formControl.$setViewValue($scope.model[$scope.options.key]);\n      }\n\n      formControl.$render();\n      formControl.$setUntouched();\n      formControl.$setPristine();\n\n      // To prevent breaking change requiring a digest to reset $viewModel\n      if(!$scope.$root.$$phase){\n        $scope.$digest();\n      }\n    }\n\n    function updateInitialValue() {\n      $scope.options.initialValue = $scope.model[$scope.options.key];\n    }\n\n    function addValidationMessages(options) {\n      options.validation.messages = options.validation.messages || {};\n      angular.forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n        if (!options.validation.messages[name]) {\n          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n          };\n        }\n      });\n    }\n\n    function invokeControllers(scope, options = {}, type = {}) {\n      angular.forEach([type.controller, options.controller], controller => {\n        if (controller) {\n          $controller(controller, {$scope: scope});\n        }\n      });\n    }\n\n    function setupFieldGroup() {\n      $scope.options.options = $scope.options.options || {};\n      $scope.options.options.formState = $scope.formState;\n    }\n  }\n\n\n\n  // link function\n  function fieldLink(scope, el) {\n    if (scope.options.fieldGroup) {\n      setFieldGroupTemplate();\n      return;\n    }\n\n    addAttributes();\n    addClasses();\n\n    var type = getFieldType(scope.options);\n    var args = arguments;\n    var thusly = this;\n    var fieldCount = 0;\n    const fieldManipulators = getManipulators(scope.options, scope.formOptions);\n    getFieldTemplate(scope.options)\n      .then(runManipulators(fieldManipulators.preWrapper))\n      .then(transcludeInWrappers(scope.options, scope.formOptions))\n      .then(runManipulators(fieldManipulators.postWrapper))\n      .then(setElementTemplate)\n      .then(watchFormControl)\n      .then(callLinkFunctions)\n      .catch(error => {\n        formlyWarn(\n          'there-was-a-problem-setting-the-template-for-this-field',\n          'There was a problem setting the template for this field ',\n          scope.options,\n          error\n        );\n      });\n\n    function setFieldGroupTemplate() {\n      checkFieldGroupApi(scope.options);\n      el.addClass('formly-field-group');\n      let extraAttributes = '';\n      if (scope.options.elementAttributes) {\n        extraAttributes = Object.keys(scope.options.elementAttributes).map(key => {\n          return `${key}=\"${scope.options.elementAttributes[key]}\"`;\n        }).join(' ');\n      }\n      let modelValue = 'model';\n      scope.options.form = scope.form;\n      if (scope.options.key) {\n        modelValue = `model['${scope.options.key}']`;\n      }\n      setElementTemplate(`\n          <formly-form model=\"${modelValue}\"\n                       fields=\"options.fieldGroup\"\n                       options=\"options.options\"\n                       form=\"options.form\"\n                       class=\"${scope.options.className}\"\n                       ${extraAttributes}\n                       is-field-group>\n          </formly-form>\n        `);\n    }\n\n    function addAttributes() {\n      if (scope.options.elementAttributes) {\n        el.attr(scope.options.elementAttributes);\n      }\n    }\n\n    function addClasses() {\n      if (scope.options.className) {\n        el.addClass(scope.options.className);\n      }\n      if (scope.options.type) {\n        el.addClass(`formly-field-${scope.options.type}`);\n      }\n    }\n\n    function setElementTemplate(templateString) {\n      el.html(asHtml(templateString));\n      $compile(el.contents())(scope);\n      return templateString;\n    }\n\n    function watchFormControl(templateString) {\n      let stopWatchingShowError = angular.noop;\n      if (scope.options.noFormControl) {\n        return;\n      }\n      const templateEl = angular.element(`<div>${templateString}</div>`);\n      const ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\n\n      if (ngModelNodes) {\n        angular.forEach(ngModelNodes, function(ngModelNode) {\n          fieldCount++;\n          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n        });\n      }\n\n      function watchFieldNameOrExistence(name) {\n        const nameExpressionRegex = /\\{\\{(.*?)}}/;\n        const nameExpression = nameExpressionRegex.exec(name);\n        if (nameExpression) {\n          name = $interpolate(name)(scope);\n        }\n        watchFieldExistence(name);\n      }\n\n      function watchFieldExistence(name) {\n        scope.$watch(`form[\"${name}\"]`, function formControlChange(formControl) {\n          if (formControl) {\n            if(fieldCount > 1){\n              if(!scope.options.formControl){\n                scope.options.formControl = [];\n              }\n              scope.options.formControl.push(formControl);\n            } else {\n              scope.options.formControl = formControl;\n            }\n            scope.fc = scope.options.formControl; // shortcut for template authors\n            stopWatchingShowError();\n            addShowMessagesWatcher();\n          }\n        });\n      }\n\n      function addShowMessagesWatcher() {\n        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n          const customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n          const {options, fc} = scope;\n          if (!fc.$invalid) {\n            return false;\n          } else if (typeof options.validation.show === 'boolean') {\n            return options.validation.show;\n          } else if (customExpression) {\n            return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n          } else {\n            let noTouchedButDirty = (angular.isUndefined(fc.$touched) && fc.$dirty);\n            return (scope.fc.$touched || noTouchedButDirty);\n          }\n        }, function onShowValidationChange(show) {\n          scope.options.validation.errorExistsAndShouldBeVisible = show;\n          scope.showError = show; // shortcut for template authors\n        });\n      }\n    }\n\n    function callLinkFunctions() {\n      if (type && type.link) {\n        type.link.apply(thusly, args);\n      }\n      if (scope.options.link) {\n        scope.options.link.apply(thusly, args);\n      }\n    }\n\n\n    function runManipulators(manipulators) {\n      return function runManipulatorsOnTemplate(templateToManipulate) {\n        var chain = $q.when(templateToManipulate);\n        angular.forEach(manipulators, manipulator => {\n          chain = chain.then(template => {\n            return $q.when(manipulator(template, scope.options, scope)).then(newTemplate => {\n              return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n            });\n          });\n        });\n        return chain;\n      };\n    }\n  }\n\n  // sort-of stateless util functions\n  function asHtml(el) {\n    var wrapper = angular.element('<a></a>');\n    return wrapper.append(el).html();\n  }\n\n  function getFieldType(options) {\n    return options.type && formlyConfig.getType(options.type);\n  }\n\n  function getManipulators(options, formOptions) {\n    let preWrapper = [];\n    let postWrapper = [];\n    addManipulators(options.templateManipulators);\n    addManipulators(formOptions.templateManipulators);\n    addManipulators(formlyConfig.templateManipulators);\n    return {preWrapper, postWrapper};\n\n    function addManipulators(manipulators) {\n      /* eslint-disable */ // it doesn't understand this :-(\n      const {preWrapper:pre = [], postWrapper:post = []} = (manipulators || {});\n      preWrapper = preWrapper.concat(pre);\n      postWrapper = postWrapper.concat(post);\n      /* eslint-enable */\n    }\n  }\n\n  function getFieldTemplate(options) {\n    function fromOptionsOrType(key, fieldType){\n      if(angular.isDefined(options[key])){\n        return options[key];\n      } else if(fieldType && angular.isDefined(fieldType[key])){\n        return fieldType[key];\n      }\n    }\n\n    let type = formlyConfig.getType(options.type, true, options);\n    let template = fromOptionsOrType('template', type);\n    let templateUrl = fromOptionsOrType('templateUrl', type);\n    if (angular.isUndefined(template) && !templateUrl) {\n      throw formlyUsability.getFieldError(\n        'type-type-has-no-template',\n        `Type '${options.type}' has not template. On element:`, options\n      );\n    }\n\n    return getTemplate(templateUrl || template, angular.isUndefined(template), options);\n  }\n\n\n  function getTemplate(template, isUrl, options) {\n    let templatePromise;\n    if (angular.isFunction(template)) {\n      templatePromise = $q.when(template(options));\n    } else {\n      templatePromise = $q.when(template);\n    }\n\n    if (!isUrl) {\n      return templatePromise;\n    } else {\n      let httpOptions = {cache: $templateCache};\n      return templatePromise\n        .then((url) => $http.get(url, httpOptions))\n        .then((response) => response.data)\n        .catch(function handleErrorGettingATemplate(error) {\n          formlyWarn(\n            'problem-loading-template-for-templateurl',\n            'Problem loading template for ' + template,\n            error\n          );\n        });\n    }\n  }\n\n  function transcludeInWrappers(options, formOptions) {\n    let wrapper = getWrapperOption(options, formOptions);\n\n    return function transcludeTemplate(template) {\n      if (!wrapper.length) {\n        return $q.when(template);\n      }\n\n      wrapper.forEach((aWrapper) => {\n        formlyUsability.checkWrapper(aWrapper, options);\n        aWrapper.validateOptions && aWrapper.validateOptions(options);\n        runApiCheck(aWrapper, options);\n      });\n      let promises = wrapper.map(w => getTemplate(w.template || w.templateUrl, !w.template));\n      return $q.all(promises).then(wrappersTemplates => {\n        wrappersTemplates.forEach((wrapperTemplate, index) => {\n          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n        });\n        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n        let totalWrapper = wrappersTemplates.shift();\n        wrappersTemplates.forEach(wrapperTemplate => {\n          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n        });\n        return doTransclusion(totalWrapper, template);\n      });\n    };\n  }\n\n  function doTransclusion(wrapper, template) {\n    let superWrapper = angular.element('<a></a>'); // this allows people not have to have a single root in wrappers\n    superWrapper.append(wrapper);\n    let transcludeEl = superWrapper.find('formly-transclude');\n    if (!transcludeEl.length) {\n      // try it using our custom find function\n      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n    }\n    transcludeEl.replaceWith(template);\n    return superWrapper.html();\n  }\n\n  function getWrapperOption(options, formOptions) {\n    /* eslint complexity:[6, 2] */\n    let wrapper = options.wrapper;\n    // explicit null means no wrapper\n    if (wrapper === null) {\n      return [];\n    }\n\n    // nothing specified means use the default wrapper for the type\n    if (!wrapper) {\n      // get all wrappers that specify they apply to this type\n      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n    } else {\n      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n    }\n\n    // get all wrappers for that the type specified that it uses.\n    var type = formlyConfig.getType(options.type, true, options);\n    if (type && type.wrapper) {\n      let typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(typeWrappers);\n    }\n\n    // add form wrappers\n    if (formOptions.wrapper) {\n      let formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(formWrappers);\n    }\n\n    // add the default wrapper last\n    var defaultWrapper = formlyConfig.getWrapper();\n    if (defaultWrapper) {\n      wrapper.push(defaultWrapper);\n    }\n    return wrapper;\n  }\n\n  function checkApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyFieldOptions, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n    // validate with the type\n    const type = options.type && formlyConfig.getType(options.type);\n    if (type) {\n      if (type.validateOptions) {\n        type.validateOptions(options);\n      }\n      runApiCheck(type, options);\n    }\n    if (options.expressionProperties && options.expressionProperties.hide) {\n      formlyWarn(\n        'dont-use-expressionproperties.hide-use-hideexpression-instead',\n        'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead',\n        options\n      );\n    }\n  }\n\n  function checkFieldGroupApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.fieldGroup, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n  }\n\n  function runApiCheck({apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions}, options) {\n    if (!apiCheck) {\n      return;\n    }\n    const instance = apiCheckInstance || formlyApiCheck;\n    const fn = apiCheckFunction || 'warn';\n    const shape = instance.shape(apiCheck);\n    instance[fn](shape, options, apiCheckOptions || {\n        prefix: `formly-field ${name}`,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n      });\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-field.js\n **/","export default formlyFocus;\n\n// @ngInject\nfunction formlyFocus($timeout, $document) {\n  return {\n    restrict: 'A',\n    link: function formlyFocusLink(scope, element, attrs) {\n      var previousEl = null;\n      var el = element[0];\n      var doc = $document[0];\n      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n        if (value === 'true') {\n          $timeout(function setElementFocus() {\n            previousEl = doc.activeElement;\n            el.focus();\n          }, ~~attrs.focusWait);\n        } else if (value === 'false') {\n          if (doc.activeElement === el) {\n            el.blur();\n            if (attrs.hasOwnProperty('refocus') && previousEl) {\n              previousEl.focus();\n            }\n          }\n        }\n      });\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-focus.js\n **/","import angular from 'angular-fix';\n\nexport default formlyForm;\n\n/**\n * @ngdoc directive\n * @name formlyForm\n * @restrict E\n */\n// @ngInject\nfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n  var currentFormId = 1;\n  return {\n    restrict: 'E',\n    template: formlyFormGetTemplate,\n    replace: true,\n    transclude: true,\n    scope: {\n      fields: '=',\n      model: '=',\n      form: '=?',\n      options: '=?'\n    },\n    controller: FormlyFormController,\n    link: formlyFormLink\n  };\n\n  function formlyFormGetTemplate(el, attrs) {\n    const rootEl = getRootEl();\n    const fieldRootEl = getFieldRootEl();\n    const formId = `formly_${currentFormId++}`;\n    let parentFormAttributes = '';\n    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n    }\n    var globalUseOneTimeBindings = formlyConfig.extras.field ?\n      formlyConfig.extras.field.useOneTimeBindings : null;\n    var localUseOneTimeBindings = attrs.useOneTimeBindings ?\n        $parse(attrs.useOneTimeBindings)() : null;\n    return `\n        <${rootEl} class=\"formly\"\n                 name=\"${getFormName()}\"\n                 role=\"form\" ${parentFormAttributes}>\n          <${fieldRootEl} formly-field\n               ng-repeat=\"field in ${getFieldOneTimeBinding('ng-repeat')}fields ${getTrackBy()}\"\n               ${getHideDirective()}=\"${getFieldOneTimeBinding(getHideDirective())}!field.hide\"\n               ${getFieldAttributes()}\n               class=\"formly-field\"\n               options=\"${getFieldOneTimeBinding('options')}field\"\n               model=\"${getFieldOneTimeBinding('model')}(field.model || model)\"\n               fields=\"${getFieldOneTimeBinding('fields')}fields\"\n               form=\"${getFieldOneTimeBinding('form')}theFormlyForm\"\n               form-id=\"${getFieldOneTimeBinding('form-id')}${getFormName()}\"\n               form-state=\"${getFieldOneTimeBinding('form-state')}options.formState\"\n               form-options=\"${getFieldOneTimeBinding('form-options')}options\"\n               index=\"${getFieldOneTimeBinding('index')}$index\">\n          </${fieldRootEl}>\n          <div ng-transclude></div>\n        </${rootEl}>\n      `;\n\n    function getRootEl() {\n      return attrs.rootEl || 'ng-form';\n    }\n\n    function getFieldRootEl() {\n      return attrs.fieldRootEl || 'div';\n    }\n\n    function getHideDirective() {\n      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n    }\n\n    function getTrackBy() {\n      if (!attrs.trackBy) {\n        return '';\n      } else {\n        return `track by ${attrs.trackBy}`;\n      }\n    }\n\n    function getFormName() {\n      let formName = formId;\n      const bindName = attrs.bindName;\n      if (bindName) {\n        if (angular.version.minor < 3) {\n          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n        }\n        // we can do a one-time binding here because we know we're in 1.3.x territory\n        formName = `${$interpolate.startSymbol()}::'formly_' + ${bindName}${$interpolate.endSymbol()}`;\n      }\n      return formName;\n    }\n\n    function copyAttributes(attributes) {\n      const excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class'];\n      const arrayAttrs = [];\n      angular.forEach(attributes, ({nodeName, nodeValue}) => {\n        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n          arrayAttrs.push(`${toKebabCase(nodeName)}=\"${nodeValue}\"`);\n        }\n      });\n      return arrayAttrs.join(' ');\n    }\n\n    function getFieldAttributes() {\n      if (attrs.fieldAttributes) {\n        return attrs.fieldAttributes;\n      }\n      if (formlyConfig.extras.field &&\n          formlyConfig.extras.field.attributes) {\n        return formlyConfig.extras.field.attributes;\n      }\n      return '';\n    }\n\n    function getFieldOneTimeBinding(attributeName) {\n      var isOneTimeBinding = false;\n      if (localUseOneTimeBindings &&\n          localUseOneTimeBindings[attributeName] !== undefined) {\n        isOneTimeBinding = localUseOneTimeBindings[attributeName];\n      } else if (globalUseOneTimeBindings &&\n               globalUseOneTimeBindings[attributeName] !== undefined) {\n        isOneTimeBinding = globalUseOneTimeBindings[attributeName];\n      }\n      return isOneTimeBinding ? '::' : '';\n    }\n  }\n\n  // @ngInject\n  function FormlyFormController($scope, formlyApiCheck, formlyUtil) {\n    setupOptions();\n    $scope.model = $scope.model || {};\n    setupFields();\n\n    // watch the model and evaluate watch expressions that depend on it.\n    $scope.$watch('model', onModelOrFormStateChange, true);\n    if ($scope.options.formState) {\n      $scope.$watch('options.formState', onModelOrFormStateChange, true);\n    }\n\n    function onModelOrFormStateChange() {\n      angular.forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n        /*jshint -W030 */\n        const model = field.model || $scope.model;\n        field.initField && field.initField();\n        field.runExpressions && field.runExpressions(model);\n        if (field.hideExpression) { // can't use hide with expressionProperties reliably\n          const val = model[field.key];\n          field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n        }\n      });\n    }\n\n    function setupFields() {\n      $scope.fields = $scope.fields || [];\n      const fieldTransform = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\n      if (fieldTransform) {\n        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n        if (!$scope.fields) {\n          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n        }\n      }\n\n      angular.forEach($scope.fields, initModel); // initializes the model property if set to 'formState'\n      angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n      angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n    }\n\n\n    function setupOptions() {\n      formlyApiCheck.throw(\n        [formlyApiCheck.formOptionsApi.optional], [$scope.options], {prefix: 'formly-form options check'}\n      );\n      $scope.options = $scope.options || {};\n      $scope.options.formState = $scope.options.formState || {};\n\n      angular.extend($scope.options, {\n        updateInitialValue,\n        resetModel,\n        initFields\n      });\n    }\n\n    function initFields() {\n      angular.forEach($scope.fields, function (field) {\n        if (isFieldGroup(field)) {\n          field.options.initFields();\n        } else {\n          field.initField();\n        }\n      });\n    }\n\n    function updateInitialValue() {\n      angular.forEach($scope.fields, field => {\n        if (isFieldGroup(field)) {\n          field.options.updateInitialValue();\n        } else {\n          field.updateInitialValue();\n        }\n      });\n    }\n\n    function resetModel() {\n      angular.forEach($scope.fields, field => {\n        if (isFieldGroup(field)) {\n          field.options.resetModel();\n        } else {\n          field.resetModel();\n        }\n      });\n    }\n\n    function initModel(field) {\n      if (angular.isString(field.model)) {\n        const expression = field.model;\n        const index = $scope.fields.indexOf(field);\n        field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n        if (!field.model) {\n          throw formlyUsability.getFieldError(\n            'field-model-must-be-initialized',\n            'Field model must be initialized. When specifying a model as a string for a field, the result of the' +\n            ' expression must have been initialized ahead of time.',\n            field);\n        }\n      }\n    }\n\n    function attachKey(field, index) {\n      if (!isFieldGroup(field)) {\n        field.key = field.key || index || 0;\n      }\n    }\n\n    function setupWatchers(field, index) {\n      if (isFieldGroup(field) || !angular.isDefined(field.watcher)) {\n        return;\n      }\n      var watchers = field.watcher;\n      if (!angular.isArray(watchers)) {\n        watchers = [watchers];\n      }\n      angular.forEach(watchers, function setupWatcher(watcher) {\n        if (!angular.isDefined(watcher.listener)) {\n          throw formlyUsability.getFieldError(\n            'all-field-watchers-must-have-a-listener',\n            'All field watchers must have a listener', field\n          );\n        }\n        var watchExpression = getWatchExpression(watcher, field, index);\n        var watchListener = getWatchListener(watcher, field, index);\n\n        var type = watcher.type || '$watch';\n        watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n      });\n    }\n\n    function getWatchExpression(watcher, field, index) {\n      var watchExpression = watcher.expression || `model['${field.key}']`;\n      if (angular.isFunction(watchExpression)) {\n        // wrap the field's watch expression so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalExpression = watchExpression;\n        watchExpression = function formlyWatchExpression() {\n          var args = modifyArgs(watcher, index, ...arguments);\n          return originalExpression(...args);\n        };\n        watchExpression.displayName = `Formly Watch Expression for field for ${field.key}`;\n      }\n      return watchExpression;\n    }\n\n    function getWatchListener(watcher, field, index) {\n      var watchListener = watcher.listener;\n      if (angular.isFunction(watchListener)) {\n        // wrap the field's watch listener so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalListener = watchListener;\n        watchListener = function formlyWatchListener() {\n          var args = modifyArgs(watcher, index, ...arguments);\n          return originalListener(...args);\n        };\n        watchListener.displayName = `Formly Watch Listener for field for ${field.key}`;\n      }\n      return watchListener;\n    }\n\n    function modifyArgs(watcher, index, ...originalArgs) {\n      return [$scope.fields[index], ...originalArgs, watcher.stopWatching];\n    }\n\n    function evalCloseToFormlyExpression(expression, val, field, index) {\n      const extraLocals = getFormlyFieldLikeLocals(field, index);\n      return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n    }\n\n    function getFormlyFieldLikeLocals(field, index) {\n      // this makes it closer to what a regular formlyExpression would be\n      return {\n        options: field,\n        index: index,\n        formState: $scope.options.formState,\n        formId: $scope.formId\n      };\n    }\n  }\n\n  function formlyFormLink(scope, el, attrs) {\n    setFormController();\n    fixChromeAutocomplete();\n\n    function setFormController() {\n      const formId = attrs.name;\n      scope.formId = formId;\n      scope.theFormlyForm = scope[formId];\n      if (attrs.form) {\n        const getter = $parse(attrs.form);\n        const setter = getter.assign;\n        const parentForm = getter(scope.$parent);\n        if (parentForm) {\n          scope.theFormlyForm = parentForm;\n          if (scope[formId]) {\n            scope.theFormlyForm.$removeControl(scope[formId]);\n          }\n\n          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n          // this is necessary because it's confusing to have a step between the form you pass in\n          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n          // to children forms :-( This line was added to solve this issue:\n          // https://github.com/formly-js/angular-formly/issues/287\n          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n          // so I expect it will remain this way for the life of angular 1.x\n          el.removeData('$formController');\n        } else {\n          setter(scope.$parent, scope[formId]);\n        }\n      }\n      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n        /* eslint no-console:0 */\n        formlyWarn(\n          'formly-form-has-no-formcontroller',\n          'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work',\n          el,\n          scope\n        );\n      }\n    }\n\n    /**\n     * chrome autocomplete lameness\n     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n     */\n    function fixChromeAutocomplete() {\n      const global = formlyConfig.extras.removeChromeAutoComplete === true;\n      const offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n      const onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n      if ((global && !offInstance) || onInstance) {\n        const input = document.createElement('input');\n        input.setAttribute('autocomplete', 'address-level4');\n        input.setAttribute('hidden', 'true');\n        el[0].appendChild(input);\n      }\n\n    }\n  }\n\n\n  // stateless util functions\n  function toKebabCase(string) {\n    if (string) {\n      return string.replace(/([A-Z])/g, $1 => '-' + $1.toLowerCase());\n    } else {\n      return '';\n    }\n  }\n\n  function isFieldGroup(field) {\n    return field && !!field.fieldGroup;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-form.js\n **/","import angular from 'angular-fix';\n\nimport formlyApiCheck from './providers/formlyApiCheck';\nimport formlyErrorAndWarningsUrlPrefix from './other/docsBaseUrl';\nimport formlyUsability from './providers/formlyUsability';\nimport formlyConfig from './providers/formlyConfig';\nimport formlyValidationMessages from './providers/formlyValidationMessages';\nimport formlyUtil from './services/formlyUtil';\nimport formlyWarn from './services/formlyWarn';\n\nimport formlyCustomValidation from './directives/formly-custom-validation';\nimport formlyField from './directives/formly-field';\nimport formlyFocus from './directives/formly-focus';\nimport formlyForm from './directives/formly-form';\n\nimport formlyNgModelAttrsManipulator from './run/formlyNgModelAttrsManipulator';\nimport formlyCustomTags from './run/formlyCustomTags';\n\nconst ngModuleName = 'formly';\n\nexport default ngModuleName;\n\nconst ngModule = angular.module(ngModuleName, []);\n\nngModule.constant('formlyApiCheck', formlyApiCheck);\nngModule.constant('formlyErrorAndWarningsUrlPrefix', formlyErrorAndWarningsUrlPrefix);\nngModule.constant('formlyVersion', VERSION); // <-- webpack variable\n\nngModule.provider('formlyUsability', formlyUsability);\nngModule.provider('formlyConfig', formlyConfig);\n\nngModule.factory('formlyValidationMessages', formlyValidationMessages);\nngModule.factory('formlyUtil', formlyUtil);\nngModule.factory('formlyWarn', formlyWarn);\n\nngModule.directive('formlyCustomValidation', formlyCustomValidation);\nngModule.directive('formlyField', formlyField);\nngModule.directive('formlyFocus', formlyFocus);\nngModule.directive('formlyForm', formlyForm);\n\nngModule.run(formlyNgModelAttrsManipulator);\nngModule.run(formlyCustomTags);\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./index.common.js\n **/","import angular from 'angular-fix';\nimport apiCheckFactory from 'api-check';\n\nlet apiCheck = apiCheckFactory({\n  output: {\n    prefix: 'angular-formly:',\n    docsBaseUrl: require('../other/docsBaseUrl')\n  }\n});\n\nfunction shapeRequiredIfNot(otherProps, propChecker) {\n  if (!angular.isArray(otherProps)) {\n    otherProps = [otherProps];\n  }\n  const type = `specified if these are not specified: \\`${otherProps.join(', ')}\\` (otherwise it's optional)`;\n  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n    var propExists = obj && obj.hasOwnProperty(propName);\n    var otherPropsExist = otherProps.some(function (otherProp) {\n      return obj && obj.hasOwnProperty(otherProp);\n    });\n    if (!otherPropsExist && !propExists) {\n      return apiCheck.utils.getError(propName, location, type);\n    } else if (propExists) {\n      return propChecker(prop, propName, location, obj);\n    }\n  }\n  shapeRequiredIfNotDefinition.type = type;\n  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n}\n\nfunction nullable(checker) {\n  return apiCheck.oneOfType([\n    apiCheck.oneOf([null]), checker\n  ]);\n}\n\nlet formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\nlet specifyWrapperType = nullable(apiCheck.typeOrArrayOf(apiCheck.string));\n\nconst apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\nconst apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n  warn: apiCheck.func,\n  throw: apiCheck.func,\n  shape: apiCheck.func\n}));\n\nconst apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\nconst formlyWrapperType = apiCheck.shape({\n  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  overwriteOk: apiCheck.bool.optional,\n  validateOptions: apiCheck.func.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional\n}).strict;\n\nconst expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([\n  formlyExpression,\n  apiCheck.shape({\n    expression: formlyExpression,\n    message: formlyExpression.optional\n  }).strict\n]));\n\nconst modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\nconst templateManipulators = nullable(apiCheck.shape({\n  preWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional,\n  postWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional\n}).strict);\n\nlet fieldOptionsApiShape = {\n  $$hashKey: apiCheck.any.optional,\n  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n  template: apiCheck.shape.ifNot(\n    ['type', 'templateUrl'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  templateUrl: apiCheck.shape.ifNot(\n    ['type', 'template'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  model: modelChecker.optional,\n  className: apiCheck.string.optional,\n  id: apiCheck.string.optional,\n  name: apiCheck.string.optional,\n  expressionProperties: expressionProperties.optional,\n  data: apiCheck.object.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  modelOptions: apiCheck.shape({\n    updateOn: apiCheck.string.optional,\n    debounce: apiCheck.oneOfType([\n      apiCheck.objectOf(apiCheck.number), apiCheck.number\n    ]).optional,\n    allowInvalid: apiCheck.bool.optional,\n    getterSetter: apiCheck.bool.optional,\n    timezone: apiCheck.string.optional\n  }).optional,\n  watcher: apiCheck.typeOrArrayOf(\n    apiCheck.shape({\n      expression: formlyExpression.optional,\n      listener: formlyExpression\n    })\n  ).optional,\n  validators: apiCheck.objectOf(apiCheck.oneOfType([\n    formlyExpression, apiCheck.shape({\n      expression: formlyExpression,\n      message: formlyExpression.optional\n    }).strict\n  ])).optional,\n  noFormControl: apiCheck.bool.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n    expression: apiCheck.shape.ifNot(['value', 'attribute', 'bound'], apiCheck.any).optional,\n    value: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n    attribute: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n    bound: apiCheck.shape.ifNot('expression', apiCheck.any).optional\n  }).strict).optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  link: apiCheck.func.optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.string, apiCheck.func, apiCheck.array\n  ]).optional,\n  validation: apiCheck.shape({\n    show: nullable(apiCheck.bool).optional,\n    messages: apiCheck.objectOf(formlyExpression).optional,\n    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n  }).optional,\n  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n  value: apiCheck.func.optional,\n  runExpressions: apiCheck.func.optional,\n  templateManipulators: templateManipulators.optional,\n  resetModel: apiCheck.func.optional,\n  initField: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  initialValue: apiCheck.any.optional,\n  defaultValue: apiCheck.any.optional\n};\n\n\nlet formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\n\nconst formOptionsApi = apiCheck.shape({\n  formState: apiCheck.object.optional,\n  resetModel: apiCheck.func.optional,\n  initFields: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  removeChromeAutoComplete: apiCheck.bool.optional,\n  templateManipulators: templateManipulators.optional,\n  wrapper: specifyWrapperType.optional,\n  fieldTransform: apiCheck.func.optional,\n  data: apiCheck.object.optional\n}).strict;\n\n\nconst fieldGroup = apiCheck.shape({\n  $$hashKey: apiCheck.any.optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  // danger. Nested field groups wont get api-checked...\n  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n  className: apiCheck.string.optional,\n  options: formOptionsApi.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  data: apiCheck.object.optional,\n  model: modelChecker.optional,\n  form: apiCheck.object.optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n}).strict;\n\nlet typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\ntypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\nlet formlyTypeOptions = apiCheck.shape({\n  name: apiCheck.string,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.string, apiCheck.array\n  ]).optional,\n  link: apiCheck.func.optional,\n  defaultOptions: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)\n  ]).optional,\n  extends: apiCheck.string.optional,\n  wrapper: specifyWrapperType.optional,\n  data: apiCheck.object.optional,\n  validateOptions: apiCheck.func.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n  overwriteOk: apiCheck.bool.optional\n}).strict;\n\nangular.extend(apiCheck, {\n  formlyTypeOptions, formlyFieldOptions, formlyExpression, formlyWrapperType, fieldGroup, formOptionsApi\n});\n\nexport default apiCheck;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyApiCheck.js\n **/","import angular from 'angular-fix';\nimport utils from '../other/utils';\n\nexport default formlyConfig;\n\n// @ngInject\nfunction formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\n  var typeMap = {};\n  var templateWrappersMap = {};\n  var defaultWrapperName = 'default';\n  var _this = this;\n  var getError = formlyUsabilityProvider.getFormlyError;\n\n  angular.extend(this, {\n    setType,\n    getType,\n    setWrapper,\n    getWrapper,\n    getWrapperByType,\n    removeWrapperByName,\n    removeWrappersForType,\n    disableWarnings: false,\n    extras: {\n      disableNgModelAttrsManipulator: false,\n      ngModelAttrsManipulatorPreferUnbound: false,\n      removeChromeAutoComplete: false,\n      defaultHideDirective: 'ng-if',\n      getFieldId: null\n    },\n    templateManipulators: {\n      preWrapper: [],\n      postWrapper: []\n    },\n    $get: () => this\n  });\n\n  function setType(options) {\n    if (angular.isArray(options)) {\n      angular.forEach(options, setType);\n    } else if (angular.isObject(options)) {\n      checkType(options);\n      if (options.extends) {\n        extendTypeOptions(options);\n      }\n      typeMap[options.name] = options;\n    } else {\n      throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`);\n    }\n  }\n\n  function checkType(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyTypeOptions, options, {\n      prefix: 'formlyConfig.setType',\n      url: 'settype-validation-failed'\n    });\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, typeMap, options, 'types');\n    } else {\n      options.overwriteOk = undefined;\n    }\n  }\n\n  function extendTypeOptions(options) {\n    const extendsType = getType(options.extends, true, options);\n    extendTypeControllerFunction(options, extendsType);\n    extendTypeLinkFunction(options, extendsType);\n    extendTypeValidateOptionsFunction(options, extendsType);\n    extendTypeDefaultOptions(options, extendsType);\n    utils.reverseDeepMerge(options, extendsType);\n    extendTemplate(options, extendsType);\n  }\n\n  function extendTemplate(options, extendsType){\n    if(options.template && extendsType.templateUrl){\n      delete options.templateUrl;\n    } else if(options.templateUrl && extendsType.template){\n      delete options.template;\n    }\n  }\n\n  function extendTypeControllerFunction(options, extendsType) {\n    const extendsCtrl = extendsType.controller;\n    if (!angular.isDefined(extendsCtrl)) {\n      return;\n    }\n    const optionsCtrl = options.controller;\n    if (angular.isDefined(optionsCtrl)) {\n      options.controller = function ($scope, $controller) {\n        $controller(extendsCtrl, {$scope});\n        $controller(optionsCtrl, {$scope});\n      };\n      options.controller.$inject = ['$scope', '$controller'];\n    } else {\n      options.controller = extendsCtrl;\n    }\n  }\n\n  function extendTypeLinkFunction(options, extendsType) {\n    const extendsFn = extendsType.link;\n    if (!angular.isDefined(extendsFn)) {\n      return;\n    }\n    const optionsFn = options.link;\n    if (angular.isDefined(optionsFn)) {\n      options.link = function () {\n        extendsFn(...arguments);\n        optionsFn(...arguments);\n      };\n    } else {\n      options.link = extendsFn;\n    }\n  }\n\n  function extendTypeValidateOptionsFunction(options, extendsType) {\n    const extendsFn = extendsType.validateOptions;\n    if (!angular.isDefined(extendsFn)) {\n      return;\n    }\n    const optionsFn = options.validateOptions;\n    const originalDefaultOptions = options.defaultOptions;\n    if (angular.isDefined(optionsFn)) {\n      options.validateOptions = function (opts) {\n        optionsFn(opts);\n        let mergedOptions = angular.copy(opts);\n        let defaultOptions = originalDefaultOptions;\n        if (defaultOptions) {\n          if (angular.isFunction(defaultOptions)) {\n            defaultOptions = defaultOptions(mergedOptions);\n          }\n          utils.reverseDeepMerge(mergedOptions, defaultOptions);\n        }\n        extendsFn(mergedOptions);\n      };\n    } else {\n      options.validateOptions = extendsFn;\n    }\n  }\n\n  function extendTypeDefaultOptions(options, extendsType) {\n    const extendsDO = extendsType.defaultOptions;\n    if (!angular.isDefined(extendsDO)) {\n      return;\n    }\n    const optionsDO = options.defaultOptions;\n    const optionsDOIsFn = angular.isFunction(optionsDO);\n    const extendsDOIsFn = angular.isFunction(extendsDO);\n    if (extendsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts) {\n        const extendsDefaultOptions = extendsDO(opts);\n        const mergedDefaultOptions = {};\n        utils.reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n        let extenderOptionsDefaultOptions = optionsDO;\n        if (optionsDOIsFn) {\n          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n        }\n        utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n        return extendsDefaultOptions;\n      };\n    } else if (optionsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts) {\n        let newDefaultOptions = {};\n        utils.reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n        return optionsDO(newDefaultOptions);\n      };\n    }\n  }\n\n  function getType(name, throwError, errorContext) {\n    if (!name) {\n      return undefined;\n    }\n    var type = typeMap[name];\n    if (!type && throwError === true) {\n      throw getError(\n        `There is no type by the name of \"${name}\": ${JSON.stringify(errorContext)}`\n      );\n    } else {\n      return type;\n    }\n  }\n\n  function setWrapper(options, name) {\n    if (angular.isArray(options)) {\n      return options.map(wrapperOptions => setWrapper(wrapperOptions));\n    } else if (angular.isObject(options)) {\n      options.types = getOptionsTypes(options);\n      options.name = getOptionsName(options, name);\n      checkWrapperAPI(options);\n      templateWrappersMap[options.name] = options;\n      return options;\n    } else if (angular.isString(options)) {\n      return setWrapper({\n        template: options,\n        name\n      });\n    }\n  }\n\n  function getOptionsTypes(options) {\n    if (angular.isString(options.types)) {\n      return [options.types];\n    }\n    if (!angular.isDefined(options.types)) {\n      return [];\n    } else {\n      return options.types;\n    }\n  }\n\n  function getOptionsName(options, name) {\n    return options.name || name || options.types.join(' ') || defaultWrapperName;\n  }\n\n  function checkWrapperAPI(options) {\n    formlyUsabilityProvider.checkWrapper(options);\n    if (options.template) {\n      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n    }\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n    } else {\n      delete options.overwriteOk;\n    }\n    checkWrapperTypes(options);\n  }\n\n  function checkWrapperTypes(options) {\n    let shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n    if (shouldThrow) {\n      throw getError(`Attempted to create a template wrapper with types that is not a string or an array of strings`);\n    }\n  }\n\n  function checkOverwrite(property, object, newValue, objectName) {\n    if (object.hasOwnProperty(property)) {\n      warn([\n        `Attempting to overwrite ${property} on ${objectName} which is currently`,\n        `${JSON.stringify(object[property])} with ${JSON.stringify(newValue)}`,\n        `To supress this warning, specify the property \"overwriteOk: true\"`\n      ].join(' '));\n    }\n  }\n\n  function getWrapper(name) {\n    return templateWrappersMap[name || defaultWrapperName];\n  }\n\n  function getWrapperByType(type) {\n    /* jshint maxcomplexity:6 */\n    var wrappers = [];\n    for (var name in templateWrappersMap) {\n      if (templateWrappersMap.hasOwnProperty(name)) {\n        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n          wrappers.push(templateWrappersMap[name]);\n        }\n      }\n    }\n    return wrappers;\n  }\n\n  function removeWrapperByName(name) {\n    var wrapper = templateWrappersMap[name];\n    delete templateWrappersMap[name];\n    return wrapper;\n  }\n\n  function removeWrappersForType(type) {\n    var wrappers = getWrapperByType(type);\n    if (!wrappers) {\n      return undefined;\n    }\n    if (!angular.isArray(wrappers)) {\n      return removeWrapperByName(wrappers.name);\n    } else {\n      wrappers.forEach((wrapper) => removeWrapperByName(wrapper.name));\n      return wrappers;\n    }\n  }\n\n\n  function warn() {\n    if (!_this.disableWarnings) {\n      /* eslint no-console:0 */\n      console.warn(...arguments);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyConfig.js\n **/","import angular from 'angular-fix';\n\nexport default formlyUsability;\n\n// @ngInject\nfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n  angular.extend(this, {\n    getFormlyError,\n    getFieldError,\n    checkWrapper,\n    checkWrapperTemplate,\n    getErrorMessage,\n    $get: () => this\n  });\n\n  function getFieldError(errorInfoSlug, message, field) {\n    if (arguments.length < 3) {\n      field = message;\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message) + ` Field definition: ${angular.toJson(field)}`);\n  }\n\n  function getFormlyError(errorInfoSlug, message) {\n    if (!message) {\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message));\n  }\n\n  function getErrorMessage(errorInfoSlug, message) {\n    let url = '';\n    if (errorInfoSlug !== null) {\n      url = `${formlyErrorAndWarningsUrlPrefix}${errorInfoSlug}`;\n    }\n    return `Formly Error: ${message}. ${url}`;\n  }\n\n  function checkWrapper(wrapper) {\n    formlyApiCheck.throw(formlyApiCheck.formlyWrapperType, wrapper, {\n      prefix: 'formlyConfig.setWrapper',\n      urlSuffix: 'setwrapper-validation-failed'\n    });\n  }\n\n  function checkWrapperTemplate(template, additionalInfo) {\n    var formlyTransclude = '<formly-transclude></formly-transclude>';\n    if (template.indexOf(formlyTransclude) === -1) {\n      throw getFormlyError(\n        `Template wrapper templates must use \"${formlyTransclude}\" somewhere in them. ` +\n        `This one does not have \"<formly-transclude></formly-transclude>\" in it: ${template}` + '\\n' +\n        `Additional information: ${JSON.stringify(additionalInfo)}`\n      );\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyUsability.js\n **/","export default formlyValidationMessages;\n\n\n// @ngInject\nfunction formlyValidationMessages() {\n\n  var validationMessages = {\n    addTemplateOptionValueMessage,\n    addStringMessage,\n    messages: {}\n  };\n\n  return validationMessages;\n\n  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n  }\n\n  function addStringMessage(name, string) {\n    validationMessages.messages[name] = () => string;\n  }\n\n\n  function templateOptionValue(prop, prefix, suffix, alternate) {\n    return function getValidationMessage(viewValue, modelValue, scope) {\n      if (scope.options.templateOptions[prop]) {\n        return `${prefix} ${scope.options.templateOptions[prop]} ${suffix}`;\n      } else {\n        return alternate;\n      }\n    };\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyValidationMessages.js\n **/","import angular from 'angular-fix';\nexport default addCustomTags;\n\n// @ngInject\nfunction addCustomTags($document) {\n  if ($document && $document.get) {\n    // IE8 check ->\n    // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n    const document = $document.get(0);\n    const div = document.createElement('div');\n    div.innerHTML = '<!--[if lt IE 9]><i></i><![endif]-->';\n    const isIeLessThan9 = (div.getElementsByTagName('i').length === 1);\n\n    if (isIeLessThan9) {\n      // add the custom elements that we need for formly\n      const customElements = [\n        'formly-field', 'formly-form', 'formly-custom-validation', 'formly-focus', 'formly-transpose'\n      ];\n      angular.forEach(customElements, el => {\n        document.createElement(el);\n      });\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./run/formlyCustomTags.js\n **/","import angular from 'angular-fix';\n\nexport default addFormlyNgModelAttrsManipulator;\n\n// @ngInject\nfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n    return;\n  }\n  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    /* jshint maxcomplexity:6 */\n    var el = document.createElement('div');\n    var data = options.data;\n    if (data.skipNgModelAttrsManipulator === true) {\n      return template;\n    }\n    el.innerHTML = template;\n    var modelNodes = el.querySelectorAll('[ng-model], [data-ng-model]');\n    if (!modelNodes || !modelNodes.length) {\n      return template;\n    }\n\n    addIfNotPresent(modelNodes, 'id', scope.id);\n    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\n    addValidation();\n    addModelOptions();\n    addTemplateOptionsAttrs();\n\n\n    return el.innerHTML;\n\n\n    function addValidation() {\n      var isValidationMessagesNotEmpty = angular.isDefined(options.validation.messages) &&\n                                          !angular.equals(options.validation.messages, {});\n      if (angular.isDefined(options.validators) || isValidationMessagesNotEmpty) {\n        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n      }\n    }\n\n    function addModelOptions() {\n      if (angular.isDefined(options.modelOptions)) {\n        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n        if (options.modelOptions.getterSetter) {\n          angular.forEach(modelNodes, node => {\n            node.setAttribute('ng-model', 'options.value');\n          });\n        }\n      }\n    }\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return;\n      }\n      const to = options.templateOptions || {};\n      const ep = options.expressionProperties || {};\n\n      let ngModelAttributes = getBuiltInAttributes();\n\n      // extend with the user's specifications winning\n      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\n      // Feel free to make this more simple :-)\n      angular.forEach(ngModelAttributes, (val, name) => {\n        /* eslint complexity:[2, 14] */\n        let attrVal;\n        let attrName;\n        const ref = `options.templateOptions['${name}']`;\n        const toVal = to[name];\n        const epVal = getEpValue(ep, name);\n\n        const inTo = angular.isDefined(toVal);\n        const inEp = angular.isDefined(epVal);\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value;\n          attrVal = name;\n        } else if (val.expression && inTo) {\n          attrName = val.expression;\n          if (angular.isString(to[name])) {\n            attrVal = `$eval(${ref})`;\n          } else if (angular.isFunction(to[name])) {\n            attrVal = `${ref}(model[options.key], options, this, $event)`;\n          } else {\n            throw new Error(\n              `options.templateOptions.${name} must be a string or function: ${JSON.stringify(options)}`\n            );\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound;\n          attrVal = ref;\n        } else if ((val.attribute || val.boolean) && inEp) {\n          attrName = val.attribute || val.boolean;\n          attrVal = `${$interpolate.startSymbol()}${ref}${$interpolate.endSymbol()}`;\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute;\n          attrVal = toVal;\n        } else if (val.boolean) {\n          if (inTo && !inEp && toVal) {\n            attrName = val.boolean;\n            attrVal = true;\n          } else {\n            /* eslint no-empty:0 */\n            // empty to illustrate that a boolean will not be added via val.bound\n            // if you want it added via val.bound, then put it in expressionProperties\n          }\n        } else if (val.bound && inTo) {\n          attrName = val.bound;\n          attrVal = ref;\n        }\n\n        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n          addIfNotPresent(modelNodes, attrName, attrVal);\n        }\n      });\n    }\n  }\n\n  // Utility functions\n  function getBuiltInAttributes() {\n    let ngModelAttributes = {\n      focus: {\n        attribute: 'formly-focus'\n      }\n    };\n    const boundOnly = [];\n    const bothBooleanAndBound = ['required', 'disabled'];\n    const bothAttributeAndBound = ['pattern', 'minlength'];\n    const expressionOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n    const attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n      bothAttributeAndBound.push('maxlength');\n    } else {\n      boundOnly.push('maxlength');\n    }\n\n    angular.forEach(boundOnly, item => {\n      ngModelAttributes[item] = {bound: 'ng-' + item};\n    });\n\n    angular.forEach(bothBooleanAndBound, item => {\n      ngModelAttributes[item] = {boolean: item, bound: 'ng-' + item};\n    });\n\n    angular.forEach(bothAttributeAndBound, item => {\n      ngModelAttributes[item] = {attribute: item, bound: 'ng-' + item};\n    });\n\n    angular.forEach(expressionOnly, item => {\n      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n      ngModelAttributes[propName] = {expression: 'ng-' + item};\n    });\n\n    angular.forEach(attributeOnly, item => {\n      ngModelAttributes[item] = {attribute: item};\n    });\n    return ngModelAttributes;\n  }\n\n  function getEpValue(ep, name) {\n    return ep['templateOptions.' + name] ||\n      ep[`templateOptions['${name}']`] ||\n      ep[`templateOptions[\"${name}\"]`];\n  }\n\n  function addIfNotPresent(nodes, attr, val) {\n    angular.forEach(nodes, node => {\n      if (!node.getAttribute(attr)) {\n        node.setAttribute(attr, val);\n      }\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./run/formlyNgModelAttrsManipulator.js\n **/","import utils from '../other/utils';\n\nexport default formlyUtil;\n\n// @ngInject\nfunction formlyUtil() {\n  return utils;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./services/formlyUtil.js\n **/","export default formlyWarn;\n\n// @ngInject\nfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n  return function warn() {\n    if (!formlyConfig.disableWarnings) {\n      var args = Array.prototype.slice.call(arguments);\n      var warnInfoSlug = args.shift();\n      args.unshift('Formly Warning:');\n      args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`);\n      $log.warn(...args);\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./services/formlyWarn.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}\n ** module id = 18\n ** module chunks = 0\n **/"],"sourceRoot":""}